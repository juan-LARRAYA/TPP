
BLUEPILL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000041d0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  080042e0  080042e0  000052e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004380  08004380  00006060  2**0
                  CONTENTS
  4 .ARM          00000008  08004380  08004380  00005380  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004388  08004388  00006060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004388  08004388  00005388  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800438c  0800438c  0000538c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  08004390  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000023c  20000060  080043f0  00006060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000029c  080043f0  0000629c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cee7  00000000  00000000  00006089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002230  00000000  00000000  00012f70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000151a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a24  00000000  00000000  00015eb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ab1  00000000  00000000  000168d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcfd  00000000  00000000  0002f385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f495  00000000  00000000  0003f082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ce517  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c68  00000000  00000000  000ce55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  000d21c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080042c8 	.word	0x080042c8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080042c8 	.word	0x080042c8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_dmul>:
 8000160:	b570      	push	{r4, r5, r6, lr}
 8000162:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000166:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800016a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800016e:	bf1d      	ittte	ne
 8000170:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000174:	ea94 0f0c 	teqne	r4, ip
 8000178:	ea95 0f0c 	teqne	r5, ip
 800017c:	f000 f8de 	bleq	800033c <__aeabi_dmul+0x1dc>
 8000180:	442c      	add	r4, r5
 8000182:	ea81 0603 	eor.w	r6, r1, r3
 8000186:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800018a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800018e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000192:	bf18      	it	ne
 8000194:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000198:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800019c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80001a0:	d038      	beq.n	8000214 <__aeabi_dmul+0xb4>
 80001a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001a6:	f04f 0500 	mov.w	r5, #0
 80001aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001ae:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001b6:	f04f 0600 	mov.w	r6, #0
 80001ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001be:	f09c 0f00 	teq	ip, #0
 80001c2:	bf18      	it	ne
 80001c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001c8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001cc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001d0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001d4:	d204      	bcs.n	80001e0 <__aeabi_dmul+0x80>
 80001d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001da:	416d      	adcs	r5, r5
 80001dc:	eb46 0606 	adc.w	r6, r6, r6
 80001e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001f4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001f8:	bf88      	it	hi
 80001fa:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001fe:	d81e      	bhi.n	800023e <__aeabi_dmul+0xde>
 8000200:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000204:	bf08      	it	eq
 8000206:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800020a:	f150 0000 	adcs.w	r0, r0, #0
 800020e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000212:	bd70      	pop	{r4, r5, r6, pc}
 8000214:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000218:	ea46 0101 	orr.w	r1, r6, r1
 800021c:	ea40 0002 	orr.w	r0, r0, r2
 8000220:	ea81 0103 	eor.w	r1, r1, r3
 8000224:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000228:	bfc2      	ittt	gt
 800022a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800022e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000232:	bd70      	popgt	{r4, r5, r6, pc}
 8000234:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000238:	f04f 0e00 	mov.w	lr, #0
 800023c:	3c01      	subs	r4, #1
 800023e:	f300 80ab 	bgt.w	8000398 <__aeabi_dmul+0x238>
 8000242:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000246:	bfde      	ittt	le
 8000248:	2000      	movle	r0, #0
 800024a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800024e:	bd70      	pople	{r4, r5, r6, pc}
 8000250:	f1c4 0400 	rsb	r4, r4, #0
 8000254:	3c20      	subs	r4, #32
 8000256:	da35      	bge.n	80002c4 <__aeabi_dmul+0x164>
 8000258:	340c      	adds	r4, #12
 800025a:	dc1b      	bgt.n	8000294 <__aeabi_dmul+0x134>
 800025c:	f104 0414 	add.w	r4, r4, #20
 8000260:	f1c4 0520 	rsb	r5, r4, #32
 8000264:	fa00 f305 	lsl.w	r3, r0, r5
 8000268:	fa20 f004 	lsr.w	r0, r0, r4
 800026c:	fa01 f205 	lsl.w	r2, r1, r5
 8000270:	ea40 0002 	orr.w	r0, r0, r2
 8000274:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000278:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800027c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000280:	fa21 f604 	lsr.w	r6, r1, r4
 8000284:	eb42 0106 	adc.w	r1, r2, r6
 8000288:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800028c:	bf08      	it	eq
 800028e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000292:	bd70      	pop	{r4, r5, r6, pc}
 8000294:	f1c4 040c 	rsb	r4, r4, #12
 8000298:	f1c4 0520 	rsb	r5, r4, #32
 800029c:	fa00 f304 	lsl.w	r3, r0, r4
 80002a0:	fa20 f005 	lsr.w	r0, r0, r5
 80002a4:	fa01 f204 	lsl.w	r2, r1, r4
 80002a8:	ea40 0002 	orr.w	r0, r0, r2
 80002ac:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 0520 	rsb	r5, r4, #32
 80002c8:	fa00 f205 	lsl.w	r2, r0, r5
 80002cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002d0:	fa20 f304 	lsr.w	r3, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea43 0302 	orr.w	r3, r3, r2
 80002dc:	fa21 f004 	lsr.w	r0, r1, r4
 80002e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002e4:	fa21 f204 	lsr.w	r2, r1, r4
 80002e8:	ea20 0002 	bic.w	r0, r0, r2
 80002ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f094 0f00 	teq	r4, #0
 8000300:	d10f      	bne.n	8000322 <__aeabi_dmul+0x1c2>
 8000302:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000306:	0040      	lsls	r0, r0, #1
 8000308:	eb41 0101 	adc.w	r1, r1, r1
 800030c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000310:	bf08      	it	eq
 8000312:	3c01      	subeq	r4, #1
 8000314:	d0f7      	beq.n	8000306 <__aeabi_dmul+0x1a6>
 8000316:	ea41 0106 	orr.w	r1, r1, r6
 800031a:	f095 0f00 	teq	r5, #0
 800031e:	bf18      	it	ne
 8000320:	4770      	bxne	lr
 8000322:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000326:	0052      	lsls	r2, r2, #1
 8000328:	eb43 0303 	adc.w	r3, r3, r3
 800032c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000330:	bf08      	it	eq
 8000332:	3d01      	subeq	r5, #1
 8000334:	d0f7      	beq.n	8000326 <__aeabi_dmul+0x1c6>
 8000336:	ea43 0306 	orr.w	r3, r3, r6
 800033a:	4770      	bx	lr
 800033c:	ea94 0f0c 	teq	r4, ip
 8000340:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000344:	bf18      	it	ne
 8000346:	ea95 0f0c 	teqne	r5, ip
 800034a:	d00c      	beq.n	8000366 <__aeabi_dmul+0x206>
 800034c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000350:	bf18      	it	ne
 8000352:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000356:	d1d1      	bne.n	80002fc <__aeabi_dmul+0x19c>
 8000358:	ea81 0103 	eor.w	r1, r1, r3
 800035c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000360:	f04f 0000 	mov.w	r0, #0
 8000364:	bd70      	pop	{r4, r5, r6, pc}
 8000366:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800036a:	bf06      	itte	eq
 800036c:	4610      	moveq	r0, r2
 800036e:	4619      	moveq	r1, r3
 8000370:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000374:	d019      	beq.n	80003aa <__aeabi_dmul+0x24a>
 8000376:	ea94 0f0c 	teq	r4, ip
 800037a:	d102      	bne.n	8000382 <__aeabi_dmul+0x222>
 800037c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000380:	d113      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000382:	ea95 0f0c 	teq	r5, ip
 8000386:	d105      	bne.n	8000394 <__aeabi_dmul+0x234>
 8000388:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800038c:	bf1c      	itt	ne
 800038e:	4610      	movne	r0, r2
 8000390:	4619      	movne	r1, r3
 8000392:	d10a      	bne.n	80003aa <__aeabi_dmul+0x24a>
 8000394:	ea81 0103 	eor.w	r1, r1, r3
 8000398:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800039c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80003ae:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003b2:	bd70      	pop	{r4, r5, r6, pc}

080003b4 <__aeabi_fmul>:
 80003b4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80003b8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80003bc:	bf1e      	ittt	ne
 80003be:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80003c2:	ea92 0f0c 	teqne	r2, ip
 80003c6:	ea93 0f0c 	teqne	r3, ip
 80003ca:	d06f      	beq.n	80004ac <__aeabi_fmul+0xf8>
 80003cc:	441a      	add	r2, r3
 80003ce:	ea80 0c01 	eor.w	ip, r0, r1
 80003d2:	0240      	lsls	r0, r0, #9
 80003d4:	bf18      	it	ne
 80003d6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80003da:	d01e      	beq.n	800041a <__aeabi_fmul+0x66>
 80003dc:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80003e0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80003e4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003e8:	fba0 3101 	umull	r3, r1, r0, r1
 80003ec:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003f0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003f4:	bf3e      	ittt	cc
 80003f6:	0049      	lslcc	r1, r1, #1
 80003f8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003fc:	005b      	lslcc	r3, r3, #1
 80003fe:	ea40 0001 	orr.w	r0, r0, r1
 8000402:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000406:	2afd      	cmp	r2, #253	@ 0xfd
 8000408:	d81d      	bhi.n	8000446 <__aeabi_fmul+0x92>
 800040a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800040e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000412:	bf08      	it	eq
 8000414:	f020 0001 	biceq.w	r0, r0, #1
 8000418:	4770      	bx	lr
 800041a:	f090 0f00 	teq	r0, #0
 800041e:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000422:	bf08      	it	eq
 8000424:	0249      	lsleq	r1, r1, #9
 8000426:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 800042a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800042e:	3a7f      	subs	r2, #127	@ 0x7f
 8000430:	bfc2      	ittt	gt
 8000432:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000436:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800043a:	4770      	bxgt	lr
 800043c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000440:	f04f 0300 	mov.w	r3, #0
 8000444:	3a01      	subs	r2, #1
 8000446:	dc5d      	bgt.n	8000504 <__aeabi_fmul+0x150>
 8000448:	f112 0f19 	cmn.w	r2, #25
 800044c:	bfdc      	itt	le
 800044e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000452:	4770      	bxle	lr
 8000454:	f1c2 0200 	rsb	r2, r2, #0
 8000458:	0041      	lsls	r1, r0, #1
 800045a:	fa21 f102 	lsr.w	r1, r1, r2
 800045e:	f1c2 0220 	rsb	r2, r2, #32
 8000462:	fa00 fc02 	lsl.w	ip, r0, r2
 8000466:	ea5f 0031 	movs.w	r0, r1, rrx
 800046a:	f140 0000 	adc.w	r0, r0, #0
 800046e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000472:	bf08      	it	eq
 8000474:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000478:	4770      	bx	lr
 800047a:	f092 0f00 	teq	r2, #0
 800047e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000482:	bf02      	ittt	eq
 8000484:	0040      	lsleq	r0, r0, #1
 8000486:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800048a:	3a01      	subeq	r2, #1
 800048c:	d0f9      	beq.n	8000482 <__aeabi_fmul+0xce>
 800048e:	ea40 000c 	orr.w	r0, r0, ip
 8000492:	f093 0f00 	teq	r3, #0
 8000496:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 800049a:	bf02      	ittt	eq
 800049c:	0049      	lsleq	r1, r1, #1
 800049e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80004a2:	3b01      	subeq	r3, #1
 80004a4:	d0f9      	beq.n	800049a <__aeabi_fmul+0xe6>
 80004a6:	ea41 010c 	orr.w	r1, r1, ip
 80004aa:	e78f      	b.n	80003cc <__aeabi_fmul+0x18>
 80004ac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80004b0:	ea92 0f0c 	teq	r2, ip
 80004b4:	bf18      	it	ne
 80004b6:	ea93 0f0c 	teqne	r3, ip
 80004ba:	d00a      	beq.n	80004d2 <__aeabi_fmul+0x11e>
 80004bc:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80004c0:	bf18      	it	ne
 80004c2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80004c6:	d1d8      	bne.n	800047a <__aeabi_fmul+0xc6>
 80004c8:	ea80 0001 	eor.w	r0, r0, r1
 80004cc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004d0:	4770      	bx	lr
 80004d2:	f090 0f00 	teq	r0, #0
 80004d6:	bf17      	itett	ne
 80004d8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 80004dc:	4608      	moveq	r0, r1
 80004de:	f091 0f00 	teqne	r1, #0
 80004e2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 80004e6:	d014      	beq.n	8000512 <__aeabi_fmul+0x15e>
 80004e8:	ea92 0f0c 	teq	r2, ip
 80004ec:	d101      	bne.n	80004f2 <__aeabi_fmul+0x13e>
 80004ee:	0242      	lsls	r2, r0, #9
 80004f0:	d10f      	bne.n	8000512 <__aeabi_fmul+0x15e>
 80004f2:	ea93 0f0c 	teq	r3, ip
 80004f6:	d103      	bne.n	8000500 <__aeabi_fmul+0x14c>
 80004f8:	024b      	lsls	r3, r1, #9
 80004fa:	bf18      	it	ne
 80004fc:	4608      	movne	r0, r1
 80004fe:	d108      	bne.n	8000512 <__aeabi_fmul+0x15e>
 8000500:	ea80 0001 	eor.w	r0, r0, r1
 8000504:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000508:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800050c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000510:	4770      	bx	lr
 8000512:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000516:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 800051a:	4770      	bx	lr

0800051c <__aeabi_drsub>:
 800051c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e002      	b.n	8000528 <__adddf3>
 8000522:	bf00      	nop

08000524 <__aeabi_dsub>:
 8000524:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000528 <__adddf3>:
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800052e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000532:	ea94 0f05 	teq	r4, r5
 8000536:	bf08      	it	eq
 8000538:	ea90 0f02 	teqeq	r0, r2
 800053c:	bf1f      	itttt	ne
 800053e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000542:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000546:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800054a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800054e:	f000 80e2 	beq.w	8000716 <__adddf3+0x1ee>
 8000552:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000556:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800055a:	bfb8      	it	lt
 800055c:	426d      	neglt	r5, r5
 800055e:	dd0c      	ble.n	800057a <__adddf3+0x52>
 8000560:	442c      	add	r4, r5
 8000562:	ea80 0202 	eor.w	r2, r0, r2
 8000566:	ea81 0303 	eor.w	r3, r1, r3
 800056a:	ea82 0000 	eor.w	r0, r2, r0
 800056e:	ea83 0101 	eor.w	r1, r3, r1
 8000572:	ea80 0202 	eor.w	r2, r0, r2
 8000576:	ea81 0303 	eor.w	r3, r1, r3
 800057a:	2d36      	cmp	r5, #54	@ 0x36
 800057c:	bf88      	it	hi
 800057e:	bd30      	pophi	{r4, r5, pc}
 8000580:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000584:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000588:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800058c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000590:	d002      	beq.n	8000598 <__adddf3+0x70>
 8000592:	4240      	negs	r0, r0
 8000594:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000598:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800059c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80005a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80005a4:	d002      	beq.n	80005ac <__adddf3+0x84>
 80005a6:	4252      	negs	r2, r2
 80005a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005ac:	ea94 0f05 	teq	r4, r5
 80005b0:	f000 80a7 	beq.w	8000702 <__adddf3+0x1da>
 80005b4:	f1a4 0401 	sub.w	r4, r4, #1
 80005b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80005bc:	db0d      	blt.n	80005da <__adddf3+0xb2>
 80005be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005c2:	fa22 f205 	lsr.w	r2, r2, r5
 80005c6:	1880      	adds	r0, r0, r2
 80005c8:	f141 0100 	adc.w	r1, r1, #0
 80005cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80005d0:	1880      	adds	r0, r0, r2
 80005d2:	fa43 f305 	asr.w	r3, r3, r5
 80005d6:	4159      	adcs	r1, r3
 80005d8:	e00e      	b.n	80005f8 <__adddf3+0xd0>
 80005da:	f1a5 0520 	sub.w	r5, r5, #32
 80005de:	f10e 0e20 	add.w	lr, lr, #32
 80005e2:	2a01      	cmp	r2, #1
 80005e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e8:	bf28      	it	cs
 80005ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ee:	fa43 f305 	asr.w	r3, r3, r5
 80005f2:	18c0      	adds	r0, r0, r3
 80005f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005fc:	d507      	bpl.n	800060e <__adddf3+0xe6>
 80005fe:	f04f 0e00 	mov.w	lr, #0
 8000602:	f1dc 0c00 	rsbs	ip, ip, #0
 8000606:	eb7e 0000 	sbcs.w	r0, lr, r0
 800060a:	eb6e 0101 	sbc.w	r1, lr, r1
 800060e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000612:	d31b      	bcc.n	800064c <__adddf3+0x124>
 8000614:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000618:	d30c      	bcc.n	8000634 <__adddf3+0x10c>
 800061a:	0849      	lsrs	r1, r1, #1
 800061c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000620:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000624:	f104 0401 	add.w	r4, r4, #1
 8000628:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800062c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000630:	f080 809a 	bcs.w	8000768 <__adddf3+0x240>
 8000634:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000638:	bf08      	it	eq
 800063a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800063e:	f150 0000 	adcs.w	r0, r0, #0
 8000642:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000646:	ea41 0105 	orr.w	r1, r1, r5
 800064a:	bd30      	pop	{r4, r5, pc}
 800064c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000650:	4140      	adcs	r0, r0
 8000652:	eb41 0101 	adc.w	r1, r1, r1
 8000656:	3c01      	subs	r4, #1
 8000658:	bf28      	it	cs
 800065a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800065e:	d2e9      	bcs.n	8000634 <__adddf3+0x10c>
 8000660:	f091 0f00 	teq	r1, #0
 8000664:	bf04      	itt	eq
 8000666:	4601      	moveq	r1, r0
 8000668:	2000      	moveq	r0, #0
 800066a:	fab1 f381 	clz	r3, r1
 800066e:	bf08      	it	eq
 8000670:	3320      	addeq	r3, #32
 8000672:	f1a3 030b 	sub.w	r3, r3, #11
 8000676:	f1b3 0220 	subs.w	r2, r3, #32
 800067a:	da0c      	bge.n	8000696 <__adddf3+0x16e>
 800067c:	320c      	adds	r2, #12
 800067e:	dd08      	ble.n	8000692 <__adddf3+0x16a>
 8000680:	f102 0c14 	add.w	ip, r2, #20
 8000684:	f1c2 020c 	rsb	r2, r2, #12
 8000688:	fa01 f00c 	lsl.w	r0, r1, ip
 800068c:	fa21 f102 	lsr.w	r1, r1, r2
 8000690:	e00c      	b.n	80006ac <__adddf3+0x184>
 8000692:	f102 0214 	add.w	r2, r2, #20
 8000696:	bfd8      	it	le
 8000698:	f1c2 0c20 	rsble	ip, r2, #32
 800069c:	fa01 f102 	lsl.w	r1, r1, r2
 80006a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80006a4:	bfdc      	itt	le
 80006a6:	ea41 010c 	orrle.w	r1, r1, ip
 80006aa:	4090      	lslle	r0, r2
 80006ac:	1ae4      	subs	r4, r4, r3
 80006ae:	bfa2      	ittt	ge
 80006b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006b4:	4329      	orrge	r1, r5
 80006b6:	bd30      	popge	{r4, r5, pc}
 80006b8:	ea6f 0404 	mvn.w	r4, r4
 80006bc:	3c1f      	subs	r4, #31
 80006be:	da1c      	bge.n	80006fa <__adddf3+0x1d2>
 80006c0:	340c      	adds	r4, #12
 80006c2:	dc0e      	bgt.n	80006e2 <__adddf3+0x1ba>
 80006c4:	f104 0414 	add.w	r4, r4, #20
 80006c8:	f1c4 0220 	rsb	r2, r4, #32
 80006cc:	fa20 f004 	lsr.w	r0, r0, r4
 80006d0:	fa01 f302 	lsl.w	r3, r1, r2
 80006d4:	ea40 0003 	orr.w	r0, r0, r3
 80006d8:	fa21 f304 	lsr.w	r3, r1, r4
 80006dc:	ea45 0103 	orr.w	r1, r5, r3
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	f1c4 040c 	rsb	r4, r4, #12
 80006e6:	f1c4 0220 	rsb	r2, r4, #32
 80006ea:	fa20 f002 	lsr.w	r0, r0, r2
 80006ee:	fa01 f304 	lsl.w	r3, r1, r4
 80006f2:	ea40 0003 	orr.w	r0, r0, r3
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	fa21 f004 	lsr.w	r0, r1, r4
 80006fe:	4629      	mov	r1, r5
 8000700:	bd30      	pop	{r4, r5, pc}
 8000702:	f094 0f00 	teq	r4, #0
 8000706:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800070a:	bf06      	itte	eq
 800070c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000710:	3401      	addeq	r4, #1
 8000712:	3d01      	subne	r5, #1
 8000714:	e74e      	b.n	80005b4 <__adddf3+0x8c>
 8000716:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800071a:	bf18      	it	ne
 800071c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000720:	d029      	beq.n	8000776 <__adddf3+0x24e>
 8000722:	ea94 0f05 	teq	r4, r5
 8000726:	bf08      	it	eq
 8000728:	ea90 0f02 	teqeq	r0, r2
 800072c:	d005      	beq.n	800073a <__adddf3+0x212>
 800072e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000732:	bf04      	itt	eq
 8000734:	4619      	moveq	r1, r3
 8000736:	4610      	moveq	r0, r2
 8000738:	bd30      	pop	{r4, r5, pc}
 800073a:	ea91 0f03 	teq	r1, r3
 800073e:	bf1e      	ittt	ne
 8000740:	2100      	movne	r1, #0
 8000742:	2000      	movne	r0, #0
 8000744:	bd30      	popne	{r4, r5, pc}
 8000746:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800074a:	d105      	bne.n	8000758 <__adddf3+0x230>
 800074c:	0040      	lsls	r0, r0, #1
 800074e:	4149      	adcs	r1, r1
 8000750:	bf28      	it	cs
 8000752:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000756:	bd30      	pop	{r4, r5, pc}
 8000758:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800075c:	bf3c      	itt	cc
 800075e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000762:	bd30      	popcc	{r4, r5, pc}
 8000764:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000768:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800076c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000770:	f04f 0000 	mov.w	r0, #0
 8000774:	bd30      	pop	{r4, r5, pc}
 8000776:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800077a:	bf1a      	itte	ne
 800077c:	4619      	movne	r1, r3
 800077e:	4610      	movne	r0, r2
 8000780:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000784:	bf1c      	itt	ne
 8000786:	460b      	movne	r3, r1
 8000788:	4602      	movne	r2, r0
 800078a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800078e:	bf06      	itte	eq
 8000790:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000794:	ea91 0f03 	teqeq	r1, r3
 8000798:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800079c:	bd30      	pop	{r4, r5, pc}
 800079e:	bf00      	nop

080007a0 <__aeabi_ui2d>:
 80007a0:	f090 0f00 	teq	r0, #0
 80007a4:	bf04      	itt	eq
 80007a6:	2100      	moveq	r1, #0
 80007a8:	4770      	bxeq	lr
 80007aa:	b530      	push	{r4, r5, lr}
 80007ac:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007b0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007b4:	f04f 0500 	mov.w	r5, #0
 80007b8:	f04f 0100 	mov.w	r1, #0
 80007bc:	e750      	b.n	8000660 <__adddf3+0x138>
 80007be:	bf00      	nop

080007c0 <__aeabi_i2d>:
 80007c0:	f090 0f00 	teq	r0, #0
 80007c4:	bf04      	itt	eq
 80007c6:	2100      	moveq	r1, #0
 80007c8:	4770      	bxeq	lr
 80007ca:	b530      	push	{r4, r5, lr}
 80007cc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007d0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007d4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d8:	bf48      	it	mi
 80007da:	4240      	negmi	r0, r0
 80007dc:	f04f 0100 	mov.w	r1, #0
 80007e0:	e73e      	b.n	8000660 <__adddf3+0x138>
 80007e2:	bf00      	nop

080007e4 <__aeabi_f2d>:
 80007e4:	0042      	lsls	r2, r0, #1
 80007e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007f2:	bf1f      	itttt	ne
 80007f4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007fc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000800:	4770      	bxne	lr
 8000802:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000806:	bf08      	it	eq
 8000808:	4770      	bxeq	lr
 800080a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800080e:	bf04      	itt	eq
 8000810:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000814:	4770      	bxeq	lr
 8000816:	b530      	push	{r4, r5, lr}
 8000818:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800081c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000820:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000824:	e71c      	b.n	8000660 <__adddf3+0x138>
 8000826:	bf00      	nop

08000828 <__aeabi_ul2d>:
 8000828:	ea50 0201 	orrs.w	r2, r0, r1
 800082c:	bf08      	it	eq
 800082e:	4770      	bxeq	lr
 8000830:	b530      	push	{r4, r5, lr}
 8000832:	f04f 0500 	mov.w	r5, #0
 8000836:	e00a      	b.n	800084e <__aeabi_l2d+0x16>

08000838 <__aeabi_l2d>:
 8000838:	ea50 0201 	orrs.w	r2, r0, r1
 800083c:	bf08      	it	eq
 800083e:	4770      	bxeq	lr
 8000840:	b530      	push	{r4, r5, lr}
 8000842:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000846:	d502      	bpl.n	800084e <__aeabi_l2d+0x16>
 8000848:	4240      	negs	r0, r0
 800084a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800084e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000852:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000856:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800085a:	f43f aed8 	beq.w	800060e <__adddf3+0xe6>
 800085e:	f04f 0203 	mov.w	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800086e:	bf18      	it	ne
 8000870:	3203      	addne	r2, #3
 8000872:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000876:	f1c2 0320 	rsb	r3, r2, #32
 800087a:	fa00 fc03 	lsl.w	ip, r0, r3
 800087e:	fa20 f002 	lsr.w	r0, r0, r2
 8000882:	fa01 fe03 	lsl.w	lr, r1, r3
 8000886:	ea40 000e 	orr.w	r0, r0, lr
 800088a:	fa21 f102 	lsr.w	r1, r1, r2
 800088e:	4414      	add	r4, r2
 8000890:	e6bd      	b.n	800060e <__adddf3+0xe6>
 8000892:	bf00      	nop

08000894 <__aeabi_d2f>:
 8000894:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000898:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 800089c:	bf24      	itt	cs
 800089e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008a2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008a6:	d90d      	bls.n	80008c4 <__aeabi_d2f+0x30>
 80008a8:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80008ac:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80008b0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008b4:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008b8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008bc:	bf08      	it	eq
 80008be:	f020 0001 	biceq.w	r0, r0, #1
 80008c2:	4770      	bx	lr
 80008c4:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008c8:	d121      	bne.n	800090e <__aeabi_d2f+0x7a>
 80008ca:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008ce:	bfbc      	itt	lt
 80008d0:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008d4:	4770      	bxlt	lr
 80008d6:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008da:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008de:	f1c2 0218 	rsb	r2, r2, #24
 80008e2:	f1c2 0c20 	rsb	ip, r2, #32
 80008e6:	fa10 f30c 	lsls.w	r3, r0, ip
 80008ea:	fa20 f002 	lsr.w	r0, r0, r2
 80008ee:	bf18      	it	ne
 80008f0:	f040 0001 	orrne.w	r0, r0, #1
 80008f4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008f8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008fc:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000900:	ea40 000c 	orr.w	r0, r0, ip
 8000904:	fa23 f302 	lsr.w	r3, r3, r2
 8000908:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800090c:	e7cc      	b.n	80008a8 <__aeabi_d2f+0x14>
 800090e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000912:	d107      	bne.n	8000924 <__aeabi_d2f+0x90>
 8000914:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000918:	bf1e      	ittt	ne
 800091a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 800091e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000922:	4770      	bxne	lr
 8000924:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000928:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 800092c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000930:	4770      	bx	lr
 8000932:	bf00      	nop

08000934 <__gesf2>:
 8000934:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000938:	e006      	b.n	8000948 <__cmpsf2+0x4>
 800093a:	bf00      	nop

0800093c <__lesf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	e002      	b.n	8000948 <__cmpsf2+0x4>
 8000942:	bf00      	nop

08000944 <__cmpsf2>:
 8000944:	f04f 0c01 	mov.w	ip, #1
 8000948:	f84d cd04 	str.w	ip, [sp, #-4]!
 800094c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000950:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000954:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000958:	bf18      	it	ne
 800095a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800095e:	d011      	beq.n	8000984 <__cmpsf2+0x40>
 8000960:	b001      	add	sp, #4
 8000962:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000966:	bf18      	it	ne
 8000968:	ea90 0f01 	teqne	r0, r1
 800096c:	bf58      	it	pl
 800096e:	ebb2 0003 	subspl.w	r0, r2, r3
 8000972:	bf88      	it	hi
 8000974:	17c8      	asrhi	r0, r1, #31
 8000976:	bf38      	it	cc
 8000978:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800097c:	bf18      	it	ne
 800097e:	f040 0001 	orrne.w	r0, r0, #1
 8000982:	4770      	bx	lr
 8000984:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000988:	d102      	bne.n	8000990 <__cmpsf2+0x4c>
 800098a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800098e:	d105      	bne.n	800099c <__cmpsf2+0x58>
 8000990:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000994:	d1e4      	bne.n	8000960 <__cmpsf2+0x1c>
 8000996:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800099a:	d0e1      	beq.n	8000960 <__cmpsf2+0x1c>
 800099c:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop

080009a4 <__aeabi_cfrcmple>:
 80009a4:	4684      	mov	ip, r0
 80009a6:	4608      	mov	r0, r1
 80009a8:	4661      	mov	r1, ip
 80009aa:	e7ff      	b.n	80009ac <__aeabi_cfcmpeq>

080009ac <__aeabi_cfcmpeq>:
 80009ac:	b50f      	push	{r0, r1, r2, r3, lr}
 80009ae:	f7ff ffc9 	bl	8000944 <__cmpsf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd0f      	pop	{r0, r1, r2, r3, pc}

080009bc <__aeabi_fcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cfcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_fcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cfcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_fcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cfcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_fcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffd2 	bl	80009a4 <__aeabi_cfrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_fcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc8 	bl	80009a4 <__aeabi_cfrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b084      	sub	sp, #16
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000a30:	4b18      	ldr	r3, [pc, #96]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a32:	4a19      	ldr	r2, [pc, #100]	@ (8000a98 <MX_ADC1_Init+0x78>)
 8000a34:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a36:	4b17      	ldr	r3, [pc, #92]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a3c:	4b15      	ldr	r3, [pc, #84]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a42:	4b14      	ldr	r3, [pc, #80]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a48:	4b12      	ldr	r3, [pc, #72]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a4a:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000a4e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000a50:	4b10      	ldr	r3, [pc, #64]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000a56:	4b0f      	ldr	r3, [pc, #60]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a58:	2201      	movs	r2, #1
 8000a5a:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a5c:	480d      	ldr	r0, [pc, #52]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a5e:	f000 fcb9 	bl	80013d4 <HAL_ADC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000a68:	f000 fa1b 	bl	8000ea2 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a70:	2301      	movs	r3, #1
 8000a72:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a78:	1d3b      	adds	r3, r7, #4
 8000a7a:	4619      	mov	r1, r3
 8000a7c:	4805      	ldr	r0, [pc, #20]	@ (8000a94 <MX_ADC1_Init+0x74>)
 8000a7e:	f000 ff41 	bl	8001904 <HAL_ADC_ConfigChannel>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 8000a88:	f000 fa0b 	bl	8000ea2 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	2000007c 	.word	0x2000007c
 8000a98:	40012400 	.word	0x40012400

08000a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b088      	sub	sp, #32
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	f107 0310 	add.w	r3, r7, #16
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
 8000aac:	605a      	str	r2, [r3, #4]
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a14      	ldr	r2, [pc, #80]	@ (8000b08 <HAL_ADC_MspInit+0x6c>)
 8000ab8:	4293      	cmp	r3, r2
 8000aba:	d121      	bne.n	8000b00 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <HAL_ADC_MspInit+0x70>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a12      	ldr	r2, [pc, #72]	@ (8000b0c <HAL_ADC_MspInit+0x70>)
 8000ac2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <HAL_ADC_MspInit+0x70>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	@ (8000b0c <HAL_ADC_MspInit+0x70>)
 8000ad6:	699b      	ldr	r3, [r3, #24]
 8000ad8:	4a0c      	ldr	r2, [pc, #48]	@ (8000b0c <HAL_ADC_MspInit+0x70>)
 8000ada:	f043 0304 	orr.w	r3, r3, #4
 8000ade:	6193      	str	r3, [r2, #24]
 8000ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8000b0c <HAL_ADC_MspInit+0x70>)
 8000ae2:	699b      	ldr	r3, [r3, #24]
 8000ae4:	f003 0304 	and.w	r3, r3, #4
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    PA6     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = Vpanel_Pin|Ipanel_Pin;
 8000aec:	2342      	movs	r3, #66	@ 0x42
 8000aee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af0:	2303      	movs	r3, #3
 8000af2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4619      	mov	r1, r3
 8000afa:	4805      	ldr	r0, [pc, #20]	@ (8000b10 <HAL_ADC_MspInit+0x74>)
 8000afc:	f001 f97a 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000b00:	bf00      	nop
 8000b02:	3720      	adds	r7, #32
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	40012400 	.word	0x40012400
 8000b0c:	40021000 	.word	0x40021000
 8000b10:	40010800 	.word	0x40010800

08000b14 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b1a:	f107 0310 	add.w	r3, r7, #16
 8000b1e:	2200      	movs	r2, #0
 8000b20:	601a      	str	r2, [r3, #0]
 8000b22:	605a      	str	r2, [r3, #4]
 8000b24:	609a      	str	r2, [r3, #8]
 8000b26:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b2a:	699b      	ldr	r3, [r3, #24]
 8000b2c:	4a1d      	ldr	r2, [pc, #116]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b2e:	f043 0310 	orr.w	r3, r3, #16
 8000b32:	6193      	str	r3, [r2, #24]
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b36:	699b      	ldr	r3, [r3, #24]
 8000b38:	f003 0310 	and.w	r3, r3, #16
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b40:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b42:	699b      	ldr	r3, [r3, #24]
 8000b44:	4a17      	ldr	r2, [pc, #92]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b46:	f043 0320 	orr.w	r3, r3, #32
 8000b4a:	6193      	str	r3, [r2, #24]
 8000b4c:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b4e:	699b      	ldr	r3, [r3, #24]
 8000b50:	f003 0320 	and.w	r3, r3, #32
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b58:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b5a:	699b      	ldr	r3, [r3, #24]
 8000b5c:	4a11      	ldr	r2, [pc, #68]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b5e:	f043 0304 	orr.w	r3, r3, #4
 8000b62:	6193      	str	r3, [r2, #24]
 8000b64:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba4 <MX_GPIO_Init+0x90>)
 8000b66:	699b      	ldr	r3, [r3, #24]
 8000b68:	f003 0304 	and.w	r3, r3, #4
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(activador_GPIO_Port, activador_Pin, GPIO_PIN_RESET);
 8000b70:	2200      	movs	r2, #0
 8000b72:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b76:	480c      	ldr	r0, [pc, #48]	@ (8000ba8 <MX_GPIO_Init+0x94>)
 8000b78:	f001 fac0 	bl	80020fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = activador_Pin;
 8000b7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b80:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b82:	2301      	movs	r3, #1
 8000b84:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(activador_GPIO_Port, &GPIO_InitStruct);
 8000b8e:	f107 0310 	add.w	r3, r7, #16
 8000b92:	4619      	mov	r1, r3
 8000b94:	4804      	ldr	r0, [pc, #16]	@ (8000ba8 <MX_GPIO_Init+0x94>)
 8000b96:	f001 f92d 	bl	8001df4 <HAL_GPIO_Init>

}
 8000b9a:	bf00      	nop
 8000b9c:	3720      	adds	r7, #32
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40021000 	.word	0x40021000
 8000ba8:	40011000 	.word	0x40011000

08000bac <readADC>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

uint32_t readADC(ADC_HandleTypeDef *hadc, uint32_t channel) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
 8000bb4:	6039      	str	r1, [r7, #0]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000bb6:	f107 030c 	add.w	r3, r7, #12
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]
 8000bc0:	609a      	str	r2, [r3, #8]

    // Configurar el canal que se desea leer
    sConfig.Channel = channel;
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	60fb      	str	r3, [r7, #12]
    sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	613b      	str	r3, [r7, #16]
    sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]

    if (HAL_ADC_ConfigChannel(hadc, &sConfig) != HAL_OK) {
 8000bce:	f107 030c 	add.w	r3, r7, #12
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	6878      	ldr	r0, [r7, #4]
 8000bd6:	f000 fe95 	bl	8001904 <HAL_ADC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <readADC+0x38>
        Error_Handler(); // Maneja errores de configuración
 8000be0:	f000 f95f 	bl	8000ea2 <Error_Handler>
    }

    // Inicia la conversión del ADC
    HAL_ADC_Start(hadc);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f000 fccd 	bl	8001584 <HAL_ADC_Start>

    // Espera hasta que la conversión termine
    if (HAL_ADC_PollForConversion(hadc, HAL_MAX_DELAY) == HAL_OK) {
 8000bea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000bee:	6878      	ldr	r0, [r7, #4]
 8000bf0:	f000 fd76 	bl	80016e0 <HAL_ADC_PollForConversion>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d104      	bne.n	8000c04 <readADC+0x58>
        // Retorna el valor convertido
        return HAL_ADC_GetValue(hadc);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 fe76 	bl	80018ec <HAL_ADC_GetValue>
 8000c00:	4603      	mov	r3, r0
 8000c02:	e000      	b.n	8000c06 <readADC+0x5a>
    }

    return 0; // Retorna 0 en caso de error
 8000c04:	2300      	movs	r3, #0
}
 8000c06:	4618      	mov	r0, r3
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <mppt>:

void mppt(int *dutyCycle, float *power, float *previousPower) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	60f8      	str	r0, [r7, #12]
 8000c18:	60b9      	str	r1, [r7, #8]
 8000c1a:	607a      	str	r2, [r7, #4]
    if (*power > *previousPower) {
 8000c1c:	68bb      	ldr	r3, [r7, #8]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4619      	mov	r1, r3
 8000c26:	4610      	mov	r0, r2
 8000c28:	f7ff fef0 	bl	8000a0c <__aeabi_fcmpgt>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00a      	beq.n	8000c48 <mppt+0x38>
        if (*dutyCycle < 255) *dutyCycle += deltaDuty;  // Si la potencia ha aumentado, continuar ajustando en la misma dirección
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c38:	dc10      	bgt.n	8000c5c <mppt+0x4c>
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	2201      	movs	r2, #1
 8000c40:	441a      	add	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	e009      	b.n	8000c5c <mppt+0x4c>
    } else {
        if (*dutyCycle > 0) *dutyCycle -= deltaDuty;    // Si la potencia ha disminuido, invertir la dirección del ajuste
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	dd05      	ble.n	8000c5c <mppt+0x4c>
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	2201      	movs	r2, #1
 8000c56:	1a9a      	subs	r2, r3, r2
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	601a      	str	r2, [r3, #0]
    }

    if (*dutyCycle < 0) *dutyCycle = 0;                 // Asegurar que el Duty Cycle esté dentro de los límites permitidos (0-255)
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	da02      	bge.n	8000c6a <mppt+0x5a>
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	2200      	movs	r2, #0
 8000c68:	601a      	str	r2, [r3, #0]
    if (*dutyCycle > 255) *dutyCycle = 255;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	2bff      	cmp	r3, #255	@ 0xff
 8000c70:	dd02      	ble.n	8000c78 <mppt+0x68>
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	22ff      	movs	r2, #255	@ 0xff
 8000c76:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);                  // Actualizar el PWM con el nuevo Duty Cycle
 8000c78:	4b05      	ldr	r3, [pc, #20]	@ (8000c90 <mppt+0x80>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	635a      	str	r2, [r3, #52]	@ 0x34

    *previousPower = *power;                            // Actualizar `previousPower` con el valor actual de `power`
 8000c80:	68bb      	ldr	r3, [r7, #8]
 8000c82:	681a      	ldr	r2, [r3, #0]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	601a      	str	r2, [r3, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	3710      	adds	r7, #16
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200000c0 	.word	0x200000c0
 8000c94:	00000000 	.word	0x00000000

08000c98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c98:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8000c9c:	b09e      	sub	sp, #120	@ 0x78
 8000c9e:	af04      	add	r7, sp, #16

  /* USER CODE BEGIN 1 */
  SystemClock_Config();
 8000ca0:	f000 f8a4 	bl	8000dec <SystemClock_Config>

    // Iniciar PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000ca4:	2100      	movs	r1, #0
 8000ca6:	4848      	ldr	r0, [pc, #288]	@ (8000dc8 <main+0x130>)
 8000ca8:	f002 f80c 	bl	8002cc4 <HAL_TIM_PWM_Start>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cac:	f000 fb0c 	bl	80012c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb0:	f000 f89c 	bl	8000dec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cb4:	f7ff ff2e 	bl	8000b14 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000cb8:	f000 fa6a 	bl	8001190 <MX_USART1_UART_Init>
  MX_ADC1_Init();
 8000cbc:	f7ff feb0 	bl	8000a20 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000cc0:	f000 f990 	bl	8000fe4 <MX_TIM1_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

      // Leer voltaje y corriente usando ADC
      V_in = readADC(&hadc1, VPANEL_CHANNEL) * (3.3 / 4095.0);
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	4841      	ldr	r0, [pc, #260]	@ (8000dcc <main+0x134>)
 8000cc8:	f7ff ff70 	bl	8000bac <readADC>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	4618      	mov	r0, r3
 8000cd0:	f7ff fd66 	bl	80007a0 <__aeabi_ui2d>
 8000cd4:	a33a      	add	r3, pc, #232	@ (adr r3, 8000dc0 <main+0x128>)
 8000cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cda:	f7ff fa41 	bl	8000160 <__aeabi_dmul>
 8000cde:	4602      	mov	r2, r0
 8000ce0:	460b      	mov	r3, r1
 8000ce2:	4610      	mov	r0, r2
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	f7ff fdd5 	bl	8000894 <__aeabi_d2f>
 8000cea:	4603      	mov	r3, r0
 8000cec:	4a38      	ldr	r2, [pc, #224]	@ (8000dd0 <main+0x138>)
 8000cee:	6013      	str	r3, [r2, #0]
      I_in = readADC(&hadc1, IPANEL_CHANNEL) * (3.3 / 4095.0);
 8000cf0:	2106      	movs	r1, #6
 8000cf2:	4836      	ldr	r0, [pc, #216]	@ (8000dcc <main+0x134>)
 8000cf4:	f7ff ff5a 	bl	8000bac <readADC>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff fd50 	bl	80007a0 <__aeabi_ui2d>
 8000d00:	a32f      	add	r3, pc, #188	@ (adr r3, 8000dc0 <main+0x128>)
 8000d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d06:	f7ff fa2b 	bl	8000160 <__aeabi_dmul>
 8000d0a:	4602      	mov	r2, r0
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	4610      	mov	r0, r2
 8000d10:	4619      	mov	r1, r3
 8000d12:	f7ff fdbf 	bl	8000894 <__aeabi_d2f>
 8000d16:	4603      	mov	r3, r0
 8000d18:	4a2e      	ldr	r2, [pc, #184]	@ (8000dd4 <main+0x13c>)
 8000d1a:	6013      	str	r3, [r2, #0]

      // Calcular potencia
      power = V_in * I_in;
 8000d1c:	4b2c      	ldr	r3, [pc, #176]	@ (8000dd0 <main+0x138>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a2c      	ldr	r2, [pc, #176]	@ (8000dd4 <main+0x13c>)
 8000d22:	6812      	ldr	r2, [r2, #0]
 8000d24:	4611      	mov	r1, r2
 8000d26:	4618      	mov	r0, r3
 8000d28:	f7ff fb44 	bl	80003b4 <__aeabi_fmul>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	461a      	mov	r2, r3
 8000d30:	4b29      	ldr	r3, [pc, #164]	@ (8000dd8 <main+0x140>)
 8000d32:	601a      	str	r2, [r3, #0]

      // Algoritmo MPPT
      mppt(&dutyCycle, &power, &previousPower);
 8000d34:	4a29      	ldr	r2, [pc, #164]	@ (8000ddc <main+0x144>)
 8000d36:	4928      	ldr	r1, [pc, #160]	@ (8000dd8 <main+0x140>)
 8000d38:	4829      	ldr	r0, [pc, #164]	@ (8000de0 <main+0x148>)
 8000d3a:	f7ff ff69 	bl	8000c10 <mppt>

      // Ajustar ciclo de trabajo del PWM
      __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, dutyCycle);
 8000d3e:	4b28      	ldr	r3, [pc, #160]	@ (8000de0 <main+0x148>)
 8000d40:	681a      	ldr	r2, [r3, #0]
 8000d42:	4b21      	ldr	r3, [pc, #132]	@ (8000dc8 <main+0x130>)
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	635a      	str	r2, [r3, #52]	@ 0x34

      // Imprimir datos al puerto serie
      char buffer[100];
      sprintf(buffer, "V_in: %.2f V, I_in: %.2f A, Power: %.2f W\n", V_in, I_in, power); // @suppress("Float formatting support")
 8000d48:	4b21      	ldr	r3, [pc, #132]	@ (8000dd0 <main+0x138>)
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	f7ff fd49 	bl	80007e4 <__aeabi_f2d>
 8000d52:	4680      	mov	r8, r0
 8000d54:	4689      	mov	r9, r1
 8000d56:	4b1f      	ldr	r3, [pc, #124]	@ (8000dd4 <main+0x13c>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fd42 	bl	80007e4 <__aeabi_f2d>
 8000d60:	4604      	mov	r4, r0
 8000d62:	460d      	mov	r5, r1
 8000d64:	4b1c      	ldr	r3, [pc, #112]	@ (8000dd8 <main+0x140>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f7ff fd3b 	bl	80007e4 <__aeabi_f2d>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	1d38      	adds	r0, r7, #4
 8000d74:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8000d78:	e9cd 4500 	strd	r4, r5, [sp]
 8000d7c:	4642      	mov	r2, r8
 8000d7e:	464b      	mov	r3, r9
 8000d80:	4918      	ldr	r1, [pc, #96]	@ (8000de4 <main+0x14c>)
 8000d82:	f002 fdf1 	bl	8003968 <siprintf>
      HAL_UART_Transmit(&huart1, (uint8_t *)buffer, strlen(buffer), HAL_MAX_DELAY);
 8000d86:	1d3b      	adds	r3, r7, #4
 8000d88:	4618      	mov	r0, r3
 8000d8a:	f7ff f9e1 	bl	8000150 <strlen>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	b29a      	uxth	r2, r3
 8000d92:	1d39      	adds	r1, r7, #4
 8000d94:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000d98:	4813      	ldr	r0, [pc, #76]	@ (8000de8 <main+0x150>)
 8000d9a:	f002 fc10 	bl	80035be <HAL_UART_Transmit>

      mppt(&dutyCycle,&power,&previousPower);
 8000d9e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ddc <main+0x144>)
 8000da0:	490d      	ldr	r1, [pc, #52]	@ (8000dd8 <main+0x140>)
 8000da2:	480f      	ldr	r0, [pc, #60]	@ (8000de0 <main+0x148>)
 8000da4:	f7ff ff34 	bl	8000c10 <mppt>
      // Guardar la potencia anterior
      previousPower = power;
 8000da8:	4b0b      	ldr	r3, [pc, #44]	@ (8000dd8 <main+0x140>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a0b      	ldr	r2, [pc, #44]	@ (8000ddc <main+0x144>)
 8000dae:	6013      	str	r3, [r2, #0]

//		Para prender y apagar el led que viene en la bluepil
//      HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_SET);
//      HAL_Delay(1000); // 1 segundo de delay
//      HAL_GPIO_WritePin(GPIOC, ACTIVADOR_PIN, GPIO_PIN_RESET);
      HAL_Delay(1000); // 1 segundo de delay
 8000db0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000db4:	f000 faea 	bl	800138c <HAL_Delay>
  {
 8000db8:	bf00      	nop
 8000dba:	e783      	b.n	8000cc4 <main+0x2c>
 8000dbc:	f3af 8000 	nop.w
 8000dc0:	e734d9b4 	.word	0xe734d9b4
 8000dc4:	3f4a680c 	.word	0x3f4a680c
 8000dc8:	200000c0 	.word	0x200000c0
 8000dcc:	2000007c 	.word	0x2000007c
 8000dd0:	200000ac 	.word	0x200000ac
 8000dd4:	200000b0 	.word	0x200000b0
 8000dd8:	200000b4 	.word	0x200000b4
 8000ddc:	200000b8 	.word	0x200000b8
 8000de0:	20000000 	.word	0x20000000
 8000de4:	080042e0 	.word	0x080042e0
 8000de8:	20000108 	.word	0x20000108

08000dec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b094      	sub	sp, #80	@ 0x50
 8000df0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000df6:	2228      	movs	r2, #40	@ 0x28
 8000df8:	2100      	movs	r1, #0
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f002 fdd4 	bl	80039a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e10:	1d3b      	adds	r3, r7, #4
 8000e12:	2200      	movs	r2, #0
 8000e14:	601a      	str	r2, [r3, #0]
 8000e16:	605a      	str	r2, [r3, #4]
 8000e18:	609a      	str	r2, [r3, #8]
 8000e1a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e1c:	2301      	movs	r3, #1
 8000e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e20:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000e26:	2300      	movs	r3, #0
 8000e28:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2a:	2301      	movs	r3, #1
 8000e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2e:	2302      	movs	r3, #2
 8000e30:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e32:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e36:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000e38:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000e3c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e42:	4618      	mov	r0, r3
 8000e44:	f001 f972 	bl	800212c <HAL_RCC_OscConfig>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000e4e:	f000 f828 	bl	8000ea2 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e52:	230f      	movs	r3, #15
 8000e54:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e56:	2302      	movs	r3, #2
 8000e58:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e5e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e62:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e68:	f107 0314 	add.w	r3, r7, #20
 8000e6c:	2102      	movs	r1, #2
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f001 fbde 	bl	8002630 <HAL_RCC_ClockConfig>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000e7a:	f000 f812 	bl	8000ea2 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000e82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000e86:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	1d3b      	adds	r3, r7, #4
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f001 fd5e 	bl	800294c <HAL_RCCEx_PeriphCLKConfig>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000e96:	f000 f804 	bl	8000ea2 <Error_Handler>
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3750      	adds	r7, #80	@ 0x50
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea2:	b480      	push	{r7}
 8000ea4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ea6:	b672      	cpsid	i
}
 8000ea8:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eaa:	bf00      	nop
 8000eac:	e7fd      	b.n	8000eaa <Error_Handler+0x8>
	...

08000eb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b085      	sub	sp, #20
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000eb6:	4b15      	ldr	r3, [pc, #84]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000eb8:	699b      	ldr	r3, [r3, #24]
 8000eba:	4a14      	ldr	r2, [pc, #80]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6193      	str	r3, [r2, #24]
 8000ec2:	4b12      	ldr	r3, [pc, #72]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ec4:	699b      	ldr	r3, [r3, #24]
 8000ec6:	f003 0301 	and.w	r3, r3, #1
 8000eca:	60bb      	str	r3, [r7, #8]
 8000ecc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ece:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed0:	69db      	ldr	r3, [r3, #28]
 8000ed2:	4a0e      	ldr	r2, [pc, #56]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000ed4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ed8:	61d3      	str	r3, [r2, #28]
 8000eda:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <HAL_MspInit+0x5c>)
 8000edc:	69db      	ldr	r3, [r3, #28]
 8000ede:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee2:	607b      	str	r3, [r7, #4]
 8000ee4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_MspInit+0x60>)
 8000ee8:	685b      	ldr	r3, [r3, #4]
 8000eea:	60fb      	str	r3, [r7, #12]
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4a04      	ldr	r2, [pc, #16]	@ (8000f10 <HAL_MspInit+0x60>)
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f02:	bf00      	nop
 8000f04:	3714      	adds	r7, #20
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010000 	.word	0x40010000

08000f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f18:	bf00      	nop
 8000f1a:	e7fd      	b.n	8000f18 <NMI_Handler+0x4>

08000f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f20:	bf00      	nop
 8000f22:	e7fd      	b.n	8000f20 <HardFault_Handler+0x4>

08000f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f28:	bf00      	nop
 8000f2a:	e7fd      	b.n	8000f28 <MemManage_Handler+0x4>

08000f2c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f30:	bf00      	nop
 8000f32:	e7fd      	b.n	8000f30 <BusFault_Handler+0x4>

08000f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f38:	bf00      	nop
 8000f3a:	e7fd      	b.n	8000f38 <UsageFault_Handler+0x4>

08000f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f40:	bf00      	nop
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bc80      	pop	{r7}
 8000f46:	4770      	bx	lr

08000f48 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr

08000f54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f54:	b480      	push	{r7}
 8000f56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f64:	f000 f9f6 	bl	8001354 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b086      	sub	sp, #24
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f74:	4a14      	ldr	r2, [pc, #80]	@ (8000fc8 <_sbrk+0x5c>)
 8000f76:	4b15      	ldr	r3, [pc, #84]	@ (8000fcc <_sbrk+0x60>)
 8000f78:	1ad3      	subs	r3, r2, r3
 8000f7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f7c:	697b      	ldr	r3, [r7, #20]
 8000f7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f80:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <_sbrk+0x64>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d102      	bne.n	8000f8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f88:	4b11      	ldr	r3, [pc, #68]	@ (8000fd0 <_sbrk+0x64>)
 8000f8a:	4a12      	ldr	r2, [pc, #72]	@ (8000fd4 <_sbrk+0x68>)
 8000f8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f8e:	4b10      	ldr	r3, [pc, #64]	@ (8000fd0 <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d207      	bcs.n	8000fac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f9c:	f002 fd0c 	bl	80039b8 <__errno>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	220c      	movs	r2, #12
 8000fa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fa6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000faa:	e009      	b.n	8000fc0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fac:	4b08      	ldr	r3, [pc, #32]	@ (8000fd0 <_sbrk+0x64>)
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fb2:	4b07      	ldr	r3, [pc, #28]	@ (8000fd0 <_sbrk+0x64>)
 8000fb4:	681a      	ldr	r2, [r3, #0]
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4413      	add	r3, r2
 8000fba:	4a05      	ldr	r2, [pc, #20]	@ (8000fd0 <_sbrk+0x64>)
 8000fbc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fbe:	68fb      	ldr	r3, [r7, #12]
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	3718      	adds	r7, #24
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20005000 	.word	0x20005000
 8000fcc:	00000400 	.word	0x00000400
 8000fd0:	200000bc 	.word	0x200000bc
 8000fd4:	200002a0 	.word	0x200002a0

08000fd8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr

08000fe4 <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b092      	sub	sp, #72	@ 0x48
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fea:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ff4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	601a      	str	r2, [r3, #0]
 8000ffc:	605a      	str	r2, [r3, #4]
 8000ffe:	609a      	str	r2, [r3, #8]
 8001000:	60da      	str	r2, [r3, #12]
 8001002:	611a      	str	r2, [r3, #16]
 8001004:	615a      	str	r2, [r3, #20]
 8001006:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2220      	movs	r2, #32
 800100c:	2100      	movs	r1, #0
 800100e:	4618      	mov	r0, r3
 8001010:	f002 fcca 	bl	80039a8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001014:	4b33      	ldr	r3, [pc, #204]	@ (80010e4 <MX_TIM1_Init+0x100>)
 8001016:	4a34      	ldr	r2, [pc, #208]	@ (80010e8 <MX_TIM1_Init+0x104>)
 8001018:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800101a:	4b32      	ldr	r3, [pc, #200]	@ (80010e4 <MX_TIM1_Init+0x100>)
 800101c:	2200      	movs	r2, #0
 800101e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b30      	ldr	r3, [pc, #192]	@ (80010e4 <MX_TIM1_Init+0x100>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001026:	4b2f      	ldr	r3, [pc, #188]	@ (80010e4 <MX_TIM1_Init+0x100>)
 8001028:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800102c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102e:	4b2d      	ldr	r3, [pc, #180]	@ (80010e4 <MX_TIM1_Init+0x100>)
 8001030:	2200      	movs	r2, #0
 8001032:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001034:	4b2b      	ldr	r3, [pc, #172]	@ (80010e4 <MX_TIM1_Init+0x100>)
 8001036:	2200      	movs	r2, #0
 8001038:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800103a:	4b2a      	ldr	r3, [pc, #168]	@ (80010e4 <MX_TIM1_Init+0x100>)
 800103c:	2200      	movs	r2, #0
 800103e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001040:	4828      	ldr	r0, [pc, #160]	@ (80010e4 <MX_TIM1_Init+0x100>)
 8001042:	f001 fdef 	bl	8002c24 <HAL_TIM_PWM_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 800104c:	f7ff ff29 	bl	8000ea2 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001050:	2300      	movs	r3, #0
 8001052:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001054:	2300      	movs	r3, #0
 8001056:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001058:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800105c:	4619      	mov	r1, r3
 800105e:	4821      	ldr	r0, [pc, #132]	@ (80010e4 <MX_TIM1_Init+0x100>)
 8001060:	f002 f9ae 	bl	80033c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 800106a:	f7ff ff1a 	bl	8000ea2 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800106e:	2360      	movs	r3, #96	@ 0x60
 8001070:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001072:	2300      	movs	r3, #0
 8001074:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001076:	2300      	movs	r3, #0
 8001078:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800107a:	2300      	movs	r3, #0
 800107c:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800107e:	2300      	movs	r3, #0
 8001080:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001082:	2300      	movs	r3, #0
 8001084:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800108a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800108e:	2200      	movs	r2, #0
 8001090:	4619      	mov	r1, r3
 8001092:	4814      	ldr	r0, [pc, #80]	@ (80010e4 <MX_TIM1_Init+0x100>)
 8001094:	f001 feb8 	bl	8002e08 <HAL_TIM_PWM_ConfigChannel>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d001      	beq.n	80010a2 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 800109e:	f7ff ff00 	bl	8000ea2 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010a6:	2300      	movs	r3, #0
 80010a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010aa:	2300      	movs	r3, #0
 80010ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80010ae:	2300      	movs	r3, #0
 80010b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010b6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	4619      	mov	r1, r3
 80010c4:	4807      	ldr	r0, [pc, #28]	@ (80010e4 <MX_TIM1_Init+0x100>)
 80010c6:	f002 f9d9 	bl	800347c <HAL_TIMEx_ConfigBreakDeadTime>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <MX_TIM1_Init+0xf0>
  {
    Error_Handler();
 80010d0:	f7ff fee7 	bl	8000ea2 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80010d4:	4803      	ldr	r0, [pc, #12]	@ (80010e4 <MX_TIM1_Init+0x100>)
 80010d6:	f000 f827 	bl	8001128 <HAL_TIM_MspPostInit>

}
 80010da:	bf00      	nop
 80010dc:	3748      	adds	r7, #72	@ 0x48
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200000c0 	.word	0x200000c0
 80010e8:	40012c00 	.word	0x40012c00

080010ec <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b085      	sub	sp, #20
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a09      	ldr	r2, [pc, #36]	@ (8001120 <HAL_TIM_PWM_MspInit+0x34>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10b      	bne.n	8001116 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80010fe:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_TIM_PWM_MspInit+0x38>)
 8001100:	699b      	ldr	r3, [r3, #24]
 8001102:	4a08      	ldr	r2, [pc, #32]	@ (8001124 <HAL_TIM_PWM_MspInit+0x38>)
 8001104:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001108:	6193      	str	r3, [r2, #24]
 800110a:	4b06      	ldr	r3, [pc, #24]	@ (8001124 <HAL_TIM_PWM_MspInit+0x38>)
 800110c:	699b      	ldr	r3, [r3, #24]
 800110e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001112:	60fb      	str	r3, [r7, #12]
 8001114:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001116:	bf00      	nop
 8001118:	3714      	adds	r7, #20
 800111a:	46bd      	mov	sp, r7
 800111c:	bc80      	pop	{r7}
 800111e:	4770      	bx	lr
 8001120:	40012c00 	.word	0x40012c00
 8001124:	40021000 	.word	0x40021000

08001128 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b088      	sub	sp, #32
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0310 	add.w	r3, r7, #16
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	4a10      	ldr	r2, [pc, #64]	@ (8001184 <HAL_TIM_MspPostInit+0x5c>)
 8001144:	4293      	cmp	r3, r2
 8001146:	d118      	bne.n	800117a <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001148:	4b0f      	ldr	r3, [pc, #60]	@ (8001188 <HAL_TIM_MspPostInit+0x60>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	4a0e      	ldr	r2, [pc, #56]	@ (8001188 <HAL_TIM_MspPostInit+0x60>)
 800114e:	f043 0304 	orr.w	r3, r3, #4
 8001152:	6193      	str	r3, [r2, #24]
 8001154:	4b0c      	ldr	r3, [pc, #48]	@ (8001188 <HAL_TIM_MspPostInit+0x60>)
 8001156:	699b      	ldr	r3, [r3, #24]
 8001158:	f003 0304 	and.w	r3, r3, #4
 800115c:	60fb      	str	r3, [r7, #12]
 800115e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PwmMppt_Pin;
 8001160:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001164:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001166:	2302      	movs	r3, #2
 8001168:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2302      	movs	r3, #2
 800116c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PwmMppt_GPIO_Port, &GPIO_InitStruct);
 800116e:	f107 0310 	add.w	r3, r7, #16
 8001172:	4619      	mov	r1, r3
 8001174:	4805      	ldr	r0, [pc, #20]	@ (800118c <HAL_TIM_MspPostInit+0x64>)
 8001176:	f000 fe3d 	bl	8001df4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800117a:	bf00      	nop
 800117c:	3720      	adds	r7, #32
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}
 8001182:	bf00      	nop
 8001184:	40012c00 	.word	0x40012c00
 8001188:	40021000 	.word	0x40021000
 800118c:	40010800 	.word	0x40010800

08001190 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001194:	4b11      	ldr	r3, [pc, #68]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 8001196:	4a12      	ldr	r2, [pc, #72]	@ (80011e0 <MX_USART1_UART_Init+0x50>)
 8001198:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800119a:	4b10      	ldr	r3, [pc, #64]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 800119c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80011a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80011a2:	4b0e      	ldr	r3, [pc, #56]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 80011a4:	2200      	movs	r2, #0
 80011a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80011a8:	4b0c      	ldr	r3, [pc, #48]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 80011aa:	2200      	movs	r2, #0
 80011ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011ae:	4b0b      	ldr	r3, [pc, #44]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011b4:	4b09      	ldr	r3, [pc, #36]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 80011b6:	220c      	movs	r2, #12
 80011b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ba:	4b08      	ldr	r3, [pc, #32]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 80011bc:	2200      	movs	r2, #0
 80011be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c0:	4b06      	ldr	r3, [pc, #24]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011c6:	4805      	ldr	r0, [pc, #20]	@ (80011dc <MX_USART1_UART_Init+0x4c>)
 80011c8:	f002 f9a9 	bl	800351e <HAL_UART_Init>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011d2:	f7ff fe66 	bl	8000ea2 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000108 	.word	0x20000108
 80011e0:	40013800 	.word	0x40013800

080011e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b088      	sub	sp, #32
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ec:	f107 0310 	add.w	r3, r7, #16
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	605a      	str	r2, [r3, #4]
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4a1c      	ldr	r2, [pc, #112]	@ (8001270 <HAL_UART_MspInit+0x8c>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d131      	bne.n	8001268 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001204:	4b1b      	ldr	r3, [pc, #108]	@ (8001274 <HAL_UART_MspInit+0x90>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	4a1a      	ldr	r2, [pc, #104]	@ (8001274 <HAL_UART_MspInit+0x90>)
 800120a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800120e:	6193      	str	r3, [r2, #24]
 8001210:	4b18      	ldr	r3, [pc, #96]	@ (8001274 <HAL_UART_MspInit+0x90>)
 8001212:	699b      	ldr	r3, [r3, #24]
 8001214:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001218:	60fb      	str	r3, [r7, #12]
 800121a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121c:	4b15      	ldr	r3, [pc, #84]	@ (8001274 <HAL_UART_MspInit+0x90>)
 800121e:	699b      	ldr	r3, [r3, #24]
 8001220:	4a14      	ldr	r2, [pc, #80]	@ (8001274 <HAL_UART_MspInit+0x90>)
 8001222:	f043 0304 	orr.w	r3, r3, #4
 8001226:	6193      	str	r3, [r2, #24]
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_UART_MspInit+0x90>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	60bb      	str	r3, [r7, #8]
 8001232:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001234:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001238:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800123e:	2303      	movs	r3, #3
 8001240:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001242:	f107 0310 	add.w	r3, r7, #16
 8001246:	4619      	mov	r1, r3
 8001248:	480b      	ldr	r0, [pc, #44]	@ (8001278 <HAL_UART_MspInit+0x94>)
 800124a:	f000 fdd3 	bl	8001df4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800124e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001252:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125c:	f107 0310 	add.w	r3, r7, #16
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_UART_MspInit+0x94>)
 8001264:	f000 fdc6 	bl	8001df4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40013800 	.word	0x40013800
 8001274:	40021000 	.word	0x40021000
 8001278:	40010800 	.word	0x40010800

0800127c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800127c:	f7ff feac 	bl	8000fd8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001280:	480b      	ldr	r0, [pc, #44]	@ (80012b0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001282:	490c      	ldr	r1, [pc, #48]	@ (80012b4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001284:	4a0c      	ldr	r2, [pc, #48]	@ (80012b8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001286:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001288:	e002      	b.n	8001290 <LoopCopyDataInit>

0800128a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800128a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800128c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800128e:	3304      	adds	r3, #4

08001290 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001290:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001292:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001294:	d3f9      	bcc.n	800128a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001296:	4a09      	ldr	r2, [pc, #36]	@ (80012bc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001298:	4c09      	ldr	r4, [pc, #36]	@ (80012c0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800129a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800129c:	e001      	b.n	80012a2 <LoopFillZerobss>

0800129e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800129e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012a0:	3204      	adds	r2, #4

080012a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012a4:	d3fb      	bcc.n	800129e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80012a6:	f002 fb8d 	bl	80039c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80012aa:	f7ff fcf5 	bl	8000c98 <main>
  bx lr
 80012ae:	4770      	bx	lr
  ldr r0, =_sdata
 80012b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012b4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80012b8:	08004390 	.word	0x08004390
  ldr r2, =_sbss
 80012bc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80012c0:	2000029c 	.word	0x2000029c

080012c4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80012c4:	e7fe      	b.n	80012c4 <ADC1_2_IRQHandler>
	...

080012c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <HAL_Init+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a07      	ldr	r2, [pc, #28]	@ (80012f0 <HAL_Init+0x28>)
 80012d2:	f043 0310 	orr.w	r3, r3, #16
 80012d6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d8:	2003      	movs	r0, #3
 80012da:	f000 fd57 	bl	8001d8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012de:	200f      	movs	r0, #15
 80012e0:	f000 f808 	bl	80012f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e4:	f7ff fde4 	bl	8000eb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e8:	2300      	movs	r3, #0
}
 80012ea:	4618      	mov	r0, r3
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	40022000 	.word	0x40022000

080012f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012fc:	4b12      	ldr	r3, [pc, #72]	@ (8001348 <HAL_InitTick+0x54>)
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	4b12      	ldr	r3, [pc, #72]	@ (800134c <HAL_InitTick+0x58>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800130a:	fbb3 f3f1 	udiv	r3, r3, r1
 800130e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001312:	4618      	mov	r0, r3
 8001314:	f000 fd61 	bl	8001dda <HAL_SYSTICK_Config>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	e00e      	b.n	8001340 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	2b0f      	cmp	r3, #15
 8001326:	d80a      	bhi.n	800133e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001328:	2200      	movs	r2, #0
 800132a:	6879      	ldr	r1, [r7, #4]
 800132c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001330:	f000 fd37 	bl	8001da2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001334:	4a06      	ldr	r2, [pc, #24]	@ (8001350 <HAL_InitTick+0x5c>)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800133a:	2300      	movs	r3, #0
 800133c:	e000      	b.n	8001340 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
}
 8001340:	4618      	mov	r0, r3
 8001342:	3708      	adds	r7, #8
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	20000004 	.word	0x20000004
 800134c:	2000000c 	.word	0x2000000c
 8001350:	20000008 	.word	0x20000008

08001354 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001354:	b480      	push	{r7}
 8001356:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001358:	4b05      	ldr	r3, [pc, #20]	@ (8001370 <HAL_IncTick+0x1c>)
 800135a:	781b      	ldrb	r3, [r3, #0]
 800135c:	461a      	mov	r2, r3
 800135e:	4b05      	ldr	r3, [pc, #20]	@ (8001374 <HAL_IncTick+0x20>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4413      	add	r3, r2
 8001364:	4a03      	ldr	r2, [pc, #12]	@ (8001374 <HAL_IncTick+0x20>)
 8001366:	6013      	str	r3, [r2, #0]
}
 8001368:	bf00      	nop
 800136a:	46bd      	mov	sp, r7
 800136c:	bc80      	pop	{r7}
 800136e:	4770      	bx	lr
 8001370:	2000000c 	.word	0x2000000c
 8001374:	20000150 	.word	0x20000150

08001378 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b02      	ldr	r3, [pc, #8]	@ (8001388 <HAL_GetTick+0x10>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	bc80      	pop	{r7}
 8001386:	4770      	bx	lr
 8001388:	20000150 	.word	0x20000150

0800138c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b084      	sub	sp, #16
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001394:	f7ff fff0 	bl	8001378 <HAL_GetTick>
 8001398:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80013a4:	d005      	beq.n	80013b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013a6:	4b0a      	ldr	r3, [pc, #40]	@ (80013d0 <HAL_Delay+0x44>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	461a      	mov	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	4413      	add	r3, r2
 80013b0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80013b2:	bf00      	nop
 80013b4:	f7ff ffe0 	bl	8001378 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d8f7      	bhi.n	80013b4 <HAL_Delay+0x28>
  {
  }
}
 80013c4:	bf00      	nop
 80013c6:	bf00      	nop
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	2000000c 	.word	0x2000000c

080013d4 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b086      	sub	sp, #24
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013dc:	2300      	movs	r3, #0
 80013de:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d101      	bne.n	80013f6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e0be      	b.n	8001574 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	689b      	ldr	r3, [r3, #8]
 80013fa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001400:	2b00      	cmp	r3, #0
 8001402:	d109      	bne.n	8001418 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	2200      	movs	r2, #0
 8001408:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2200      	movs	r2, #0
 800140e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f7ff fb42 	bl	8000a9c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fbc5 	bl	8001ba8 <ADC_ConversionStop_Disable>
 800141e:	4603      	mov	r3, r0
 8001420:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001426:	f003 0310 	and.w	r3, r3, #16
 800142a:	2b00      	cmp	r3, #0
 800142c:	f040 8099 	bne.w	8001562 <HAL_ADC_Init+0x18e>
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	2b00      	cmp	r3, #0
 8001434:	f040 8095 	bne.w	8001562 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800143c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001440:	f023 0302 	bic.w	r3, r3, #2
 8001444:	f043 0202 	orr.w	r2, r3, #2
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8001454:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	7b1b      	ldrb	r3, [r3, #12]
 800145a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800145c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800145e:	68ba      	ldr	r2, [r7, #8]
 8001460:	4313      	orrs	r3, r2
 8001462:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	689b      	ldr	r3, [r3, #8]
 8001468:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800146c:	d003      	beq.n	8001476 <HAL_ADC_Init+0xa2>
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d102      	bne.n	800147c <HAL_ADC_Init+0xa8>
 8001476:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800147a:	e000      	b.n	800147e <HAL_ADC_Init+0xaa>
 800147c:	2300      	movs	r3, #0
 800147e:	693a      	ldr	r2, [r7, #16]
 8001480:	4313      	orrs	r3, r2
 8001482:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	7d1b      	ldrb	r3, [r3, #20]
 8001488:	2b01      	cmp	r3, #1
 800148a:	d119      	bne.n	80014c0 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	7b1b      	ldrb	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d109      	bne.n	80014a8 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	699b      	ldr	r3, [r3, #24]
 8001498:	3b01      	subs	r3, #1
 800149a:	035a      	lsls	r2, r3, #13
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	4313      	orrs	r3, r2
 80014a0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	e00b      	b.n	80014c0 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014ac:	f043 0220 	orr.w	r2, r3, #32
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	693a      	ldr	r2, [r7, #16]
 80014d0:	430a      	orrs	r2, r1
 80014d2:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	689a      	ldr	r2, [r3, #8]
 80014da:	4b28      	ldr	r3, [pc, #160]	@ (800157c <HAL_ADC_Init+0x1a8>)
 80014dc:	4013      	ands	r3, r2
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	68b9      	ldr	r1, [r7, #8]
 80014e4:	430b      	orrs	r3, r1
 80014e6:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80014f0:	d003      	beq.n	80014fa <HAL_ADC_Init+0x126>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d104      	bne.n	8001504 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	691b      	ldr	r3, [r3, #16]
 80014fe:	3b01      	subs	r3, #1
 8001500:	051b      	lsls	r3, r3, #20
 8001502:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800150a:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	430a      	orrs	r2, r1
 8001516:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	689a      	ldr	r2, [r3, #8]
 800151e:	4b18      	ldr	r3, [pc, #96]	@ (8001580 <HAL_ADC_Init+0x1ac>)
 8001520:	4013      	ands	r3, r2
 8001522:	68ba      	ldr	r2, [r7, #8]
 8001524:	429a      	cmp	r2, r3
 8001526:	d10b      	bne.n	8001540 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2200      	movs	r2, #0
 800152c:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001532:	f023 0303 	bic.w	r3, r3, #3
 8001536:	f043 0201 	orr.w	r2, r3, #1
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800153e:	e018      	b.n	8001572 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001544:	f023 0312 	bic.w	r3, r3, #18
 8001548:	f043 0210 	orr.w	r2, r3, #16
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001554:	f043 0201 	orr.w	r2, r3, #1
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800155c:	2301      	movs	r3, #1
 800155e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001560:	e007      	b.n	8001572 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001566:	f043 0210 	orr.w	r2, r3, #16
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800156e:	2301      	movs	r3, #1
 8001570:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001572:	7dfb      	ldrb	r3, [r7, #23]
}
 8001574:	4618      	mov	r0, r3
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	ffe1f7fd 	.word	0xffe1f7fd
 8001580:	ff1f0efe 	.word	0xff1f0efe

08001584 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_ADC_Start+0x1a>
 800159a:	2302      	movs	r3, #2
 800159c:	e098      	b.n	80016d0 <HAL_ADC_Start+0x14c>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	f000 faa4 	bl	8001af4 <ADC_Enable>
 80015ac:	4603      	mov	r3, r0
 80015ae:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80015b0:	7bfb      	ldrb	r3, [r7, #15]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 8087 	bne.w	80016c6 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015c0:	f023 0301 	bic.w	r3, r3, #1
 80015c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a41      	ldr	r2, [pc, #260]	@ (80016d8 <HAL_ADC_Start+0x154>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d105      	bne.n	80015e2 <HAL_ADC_Start+0x5e>
 80015d6:	4b41      	ldr	r3, [pc, #260]	@ (80016dc <HAL_ADC_Start+0x158>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d115      	bne.n	800160e <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80015e6:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d026      	beq.n	800164a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001600:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001604:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800160c:	e01d      	b.n	800164a <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001612:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4a2f      	ldr	r2, [pc, #188]	@ (80016dc <HAL_ADC_Start+0x158>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d004      	beq.n	800162e <HAL_ADC_Start+0xaa>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a2b      	ldr	r2, [pc, #172]	@ (80016d8 <HAL_ADC_Start+0x154>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d10d      	bne.n	800164a <HAL_ADC_Start+0xc6>
 800162e:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <HAL_ADC_Start+0x158>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001636:	2b00      	cmp	r3, #0
 8001638:	d007      	beq.n	800164a <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001642:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800164e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d006      	beq.n	8001664 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800165a:	f023 0206 	bic.w	r2, r3, #6
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001662:	e002      	b.n	800166a <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2200      	movs	r2, #0
 8001668:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2200      	movs	r2, #0
 800166e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f06f 0202 	mvn.w	r2, #2
 800167a:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001686:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800168a:	d113      	bne.n	80016b4 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8001690:	4a11      	ldr	r2, [pc, #68]	@ (80016d8 <HAL_ADC_Start+0x154>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d105      	bne.n	80016a2 <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <HAL_ADC_Start+0x158>)
 8001698:	685b      	ldr	r3, [r3, #4]
 800169a:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d108      	bne.n	80016b4 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	689a      	ldr	r2, [r3, #8]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	e00c      	b.n	80016ce <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	e003      	b.n	80016ce <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80016ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3710      	adds	r7, #16
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40012800 	.word	0x40012800
 80016dc:	40012400 	.word	0x40012400

080016e0 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80016e0:	b590      	push	{r4, r7, lr}
 80016e2:	b087      	sub	sp, #28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
 80016e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80016ee:	2300      	movs	r3, #0
 80016f0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80016f2:	2300      	movs	r3, #0
 80016f4:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80016f6:	f7ff fe3f 	bl	8001378 <HAL_GetTick>
 80016fa:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001706:	2b00      	cmp	r3, #0
 8001708:	d00b      	beq.n	8001722 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170e:	f043 0220 	orr.w	r2, r3, #32
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e0d3      	b.n	80018ca <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800172c:	2b00      	cmp	r3, #0
 800172e:	d131      	bne.n	8001794 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001736:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800173a:	2b00      	cmp	r3, #0
 800173c:	d12a      	bne.n	8001794 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800173e:	e021      	b.n	8001784 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001746:	d01d      	beq.n	8001784 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <HAL_ADC_PollForConversion+0x7e>
 800174e:	f7ff fe13 	bl	8001378 <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	429a      	cmp	r2, r3
 800175c:	d212      	bcs.n	8001784 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0302 	and.w	r3, r3, #2
 8001768:	2b00      	cmp	r3, #0
 800176a:	d10b      	bne.n	8001784 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001770:	f043 0204 	orr.w	r2, r3, #4
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	2200      	movs	r2, #0
 800177c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8001780:	2303      	movs	r3, #3
 8001782:	e0a2      	b.n	80018ca <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d0d6      	beq.n	8001740 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8001792:	e070      	b.n	8001876 <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8001794:	4b4f      	ldr	r3, [pc, #316]	@ (80018d4 <HAL_ADC_PollForConversion+0x1f4>)
 8001796:	681c      	ldr	r4, [r3, #0]
 8001798:	2002      	movs	r0, #2
 800179a:	f001 f98d 	bl	8002ab8 <HAL_RCCEx_GetPeriphCLKFreq>
 800179e:	4603      	mov	r3, r0
 80017a0:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6919      	ldr	r1, [r3, #16]
 80017aa:	4b4b      	ldr	r3, [pc, #300]	@ (80018d8 <HAL_ADC_PollForConversion+0x1f8>)
 80017ac:	400b      	ands	r3, r1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d118      	bne.n	80017e4 <HAL_ADC_PollForConversion+0x104>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68d9      	ldr	r1, [r3, #12]
 80017b8:	4b48      	ldr	r3, [pc, #288]	@ (80018dc <HAL_ADC_PollForConversion+0x1fc>)
 80017ba:	400b      	ands	r3, r1
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d111      	bne.n	80017e4 <HAL_ADC_PollForConversion+0x104>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	6919      	ldr	r1, [r3, #16]
 80017c6:	4b46      	ldr	r3, [pc, #280]	@ (80018e0 <HAL_ADC_PollForConversion+0x200>)
 80017c8:	400b      	ands	r3, r1
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d108      	bne.n	80017e0 <HAL_ADC_PollForConversion+0x100>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	68d9      	ldr	r1, [r3, #12]
 80017d4:	4b43      	ldr	r3, [pc, #268]	@ (80018e4 <HAL_ADC_PollForConversion+0x204>)
 80017d6:	400b      	ands	r3, r1
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d101      	bne.n	80017e0 <HAL_ADC_PollForConversion+0x100>
 80017dc:	2314      	movs	r3, #20
 80017de:	e020      	b.n	8001822 <HAL_ADC_PollForConversion+0x142>
 80017e0:	2329      	movs	r3, #41	@ 0x29
 80017e2:	e01e      	b.n	8001822 <HAL_ADC_PollForConversion+0x142>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	6919      	ldr	r1, [r3, #16]
 80017ea:	4b3d      	ldr	r3, [pc, #244]	@ (80018e0 <HAL_ADC_PollForConversion+0x200>)
 80017ec:	400b      	ands	r3, r1
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d106      	bne.n	8001800 <HAL_ADC_PollForConversion+0x120>
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	68d9      	ldr	r1, [r3, #12]
 80017f8:	4b3a      	ldr	r3, [pc, #232]	@ (80018e4 <HAL_ADC_PollForConversion+0x204>)
 80017fa:	400b      	ands	r3, r1
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00d      	beq.n	800181c <HAL_ADC_PollForConversion+0x13c>
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6919      	ldr	r1, [r3, #16]
 8001806:	4b38      	ldr	r3, [pc, #224]	@ (80018e8 <HAL_ADC_PollForConversion+0x208>)
 8001808:	400b      	ands	r3, r1
 800180a:	2b00      	cmp	r3, #0
 800180c:	d108      	bne.n	8001820 <HAL_ADC_PollForConversion+0x140>
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	68d9      	ldr	r1, [r3, #12]
 8001814:	4b34      	ldr	r3, [pc, #208]	@ (80018e8 <HAL_ADC_PollForConversion+0x208>)
 8001816:	400b      	ands	r3, r1
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <HAL_ADC_PollForConversion+0x140>
 800181c:	2354      	movs	r3, #84	@ 0x54
 800181e:	e000      	b.n	8001822 <HAL_ADC_PollForConversion+0x142>
 8001820:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8001822:	fb02 f303 	mul.w	r3, r2, r3
 8001826:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001828:	e021      	b.n	800186e <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800182a:	683b      	ldr	r3, [r7, #0]
 800182c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001830:	d01a      	beq.n	8001868 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d007      	beq.n	8001848 <HAL_ADC_PollForConversion+0x168>
 8001838:	f7ff fd9e 	bl	8001378 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	683a      	ldr	r2, [r7, #0]
 8001844:	429a      	cmp	r2, r3
 8001846:	d20f      	bcs.n	8001868 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	429a      	cmp	r2, r3
 800184e:	d90b      	bls.n	8001868 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001854:	f043 0204 	orr.w	r2, r3, #4
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2200      	movs	r2, #0
 8001860:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e030      	b.n	80018ca <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	3301      	adds	r3, #1
 800186c:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	693a      	ldr	r2, [r7, #16]
 8001872:	429a      	cmp	r2, r3
 8001874:	d8d9      	bhi.n	800182a <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f06f 0212 	mvn.w	r2, #18
 800187e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001884:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8001896:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 800189a:	d115      	bne.n	80018c8 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d111      	bne.n	80018c8 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d105      	bne.n	80018c8 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c0:	f043 0201 	orr.w	r2, r3, #1
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	371c      	adds	r7, #28
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd90      	pop	{r4, r7, pc}
 80018d2:	bf00      	nop
 80018d4:	20000004 	.word	0x20000004
 80018d8:	24924924 	.word	0x24924924
 80018dc:	00924924 	.word	0x00924924
 80018e0:	12492492 	.word	0x12492492
 80018e4:	00492492 	.word	0x00492492
 80018e8:	00249249 	.word	0x00249249

080018ec <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	370c      	adds	r7, #12
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001904:	b480      	push	{r7}
 8001906:	b085      	sub	sp, #20
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8001912:	2300      	movs	r3, #0
 8001914:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800191c:	2b01      	cmp	r3, #1
 800191e:	d101      	bne.n	8001924 <HAL_ADC_ConfigChannel+0x20>
 8001920:	2302      	movs	r3, #2
 8001922:	e0dc      	b.n	8001ade <HAL_ADC_ConfigChannel+0x1da>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	2b06      	cmp	r3, #6
 8001932:	d81c      	bhi.n	800196e <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800193a:	683b      	ldr	r3, [r7, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	4613      	mov	r3, r2
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	4413      	add	r3, r2
 8001944:	3b05      	subs	r3, #5
 8001946:	221f      	movs	r2, #31
 8001948:	fa02 f303 	lsl.w	r3, r2, r3
 800194c:	43db      	mvns	r3, r3
 800194e:	4019      	ands	r1, r3
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	6818      	ldr	r0, [r3, #0]
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b05      	subs	r3, #5
 8001960:	fa00 f203 	lsl.w	r2, r0, r3
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	430a      	orrs	r2, r1
 800196a:	635a      	str	r2, [r3, #52]	@ 0x34
 800196c:	e03c      	b.n	80019e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	2b0c      	cmp	r3, #12
 8001974:	d81c      	bhi.n	80019b0 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b23      	subs	r3, #35	@ 0x23
 8001988:	221f      	movs	r2, #31
 800198a:	fa02 f303 	lsl.w	r3, r2, r3
 800198e:	43db      	mvns	r3, r3
 8001990:	4019      	ands	r1, r3
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	6818      	ldr	r0, [r3, #0]
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	685a      	ldr	r2, [r3, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	009b      	lsls	r3, r3, #2
 800199e:	4413      	add	r3, r2
 80019a0:	3b23      	subs	r3, #35	@ 0x23
 80019a2:	fa00 f203 	lsl.w	r2, r0, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	430a      	orrs	r2, r1
 80019ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80019ae:	e01b      	b.n	80019e8 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685a      	ldr	r2, [r3, #4]
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	3b41      	subs	r3, #65	@ 0x41
 80019c2:	221f      	movs	r2, #31
 80019c4:	fa02 f303 	lsl.w	r3, r2, r3
 80019c8:	43db      	mvns	r3, r3
 80019ca:	4019      	ands	r1, r3
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	6818      	ldr	r0, [r3, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685a      	ldr	r2, [r3, #4]
 80019d4:	4613      	mov	r3, r2
 80019d6:	009b      	lsls	r3, r3, #2
 80019d8:	4413      	add	r3, r2
 80019da:	3b41      	subs	r3, #65	@ 0x41
 80019dc:	fa00 f203 	lsl.w	r2, r0, r3
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	430a      	orrs	r2, r1
 80019e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	2b09      	cmp	r3, #9
 80019ee:	d91c      	bls.n	8001a2a <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68d9      	ldr	r1, [r3, #12]
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	4613      	mov	r3, r2
 80019fc:	005b      	lsls	r3, r3, #1
 80019fe:	4413      	add	r3, r2
 8001a00:	3b1e      	subs	r3, #30
 8001a02:	2207      	movs	r2, #7
 8001a04:	fa02 f303 	lsl.w	r3, r2, r3
 8001a08:	43db      	mvns	r3, r3
 8001a0a:	4019      	ands	r1, r3
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	6898      	ldr	r0, [r3, #8]
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4613      	mov	r3, r2
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	4413      	add	r3, r2
 8001a1a:	3b1e      	subs	r3, #30
 8001a1c:	fa00 f203 	lsl.w	r2, r0, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	430a      	orrs	r2, r1
 8001a26:	60da      	str	r2, [r3, #12]
 8001a28:	e019      	b.n	8001a5e <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	6919      	ldr	r1, [r3, #16]
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	4613      	mov	r3, r2
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	4413      	add	r3, r2
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	4019      	ands	r1, r3
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	6898      	ldr	r0, [r3, #8]
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681a      	ldr	r2, [r3, #0]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	4413      	add	r3, r2
 8001a52:	fa00 f203 	lsl.w	r2, r0, r3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	430a      	orrs	r2, r1
 8001a5c:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a5e:	683b      	ldr	r3, [r7, #0]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2b10      	cmp	r3, #16
 8001a64:	d003      	beq.n	8001a6e <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001a6a:	2b11      	cmp	r3, #17
 8001a6c:	d132      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1d      	ldr	r2, [pc, #116]	@ (8001ae8 <HAL_ADC_ConfigChannel+0x1e4>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d125      	bne.n	8001ac4 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d126      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	689a      	ldr	r2, [r3, #8]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8001a94:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	2b10      	cmp	r3, #16
 8001a9c:	d11a      	bne.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a9e:	4b13      	ldr	r3, [pc, #76]	@ (8001aec <HAL_ADC_ConfigChannel+0x1e8>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a13      	ldr	r2, [pc, #76]	@ (8001af0 <HAL_ADC_ConfigChannel+0x1ec>)
 8001aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8001aa8:	0c9a      	lsrs	r2, r3, #18
 8001aaa:	4613      	mov	r3, r2
 8001aac:	009b      	lsls	r3, r3, #2
 8001aae:	4413      	add	r3, r2
 8001ab0:	005b      	lsls	r3, r3, #1
 8001ab2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001ab4:	e002      	b.n	8001abc <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001ab6:	68bb      	ldr	r3, [r7, #8]
 8001ab8:	3b01      	subs	r3, #1
 8001aba:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d1f9      	bne.n	8001ab6 <HAL_ADC_ConfigChannel+0x1b2>
 8001ac2:	e007      	b.n	8001ad4 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ac8:	f043 0220 	orr.w	r2, r3, #32
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bc80      	pop	{r7}
 8001ae6:	4770      	bx	lr
 8001ae8:	40012400 	.word	0x40012400
 8001aec:	20000004 	.word	0x20000004
 8001af0:	431bde83 	.word	0x431bde83

08001af4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b084      	sub	sp, #16
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001afc:	2300      	movs	r3, #0
 8001afe:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d040      	beq.n	8001b94 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001b22:	4b1f      	ldr	r3, [pc, #124]	@ (8001ba0 <ADC_Enable+0xac>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4a1f      	ldr	r2, [pc, #124]	@ (8001ba4 <ADC_Enable+0xb0>)
 8001b28:	fba2 2303 	umull	r2, r3, r2, r3
 8001b2c:	0c9b      	lsrs	r3, r3, #18
 8001b2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b30:	e002      	b.n	8001b38 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	3b01      	subs	r3, #1
 8001b36:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001b38:	68bb      	ldr	r3, [r7, #8]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f9      	bne.n	8001b32 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001b3e:	f7ff fc1b 	bl	8001378 <HAL_GetTick>
 8001b42:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b44:	e01f      	b.n	8001b86 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b46:	f7ff fc17 	bl	8001378 <HAL_GetTick>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	2b02      	cmp	r3, #2
 8001b52:	d918      	bls.n	8001b86 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	689b      	ldr	r3, [r3, #8]
 8001b5a:	f003 0301 	and.w	r3, r3, #1
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d011      	beq.n	8001b86 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b66:	f043 0210 	orr.w	r2, r3, #16
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b72:	f043 0201 	orr.w	r2, r3, #1
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001b82:	2301      	movs	r3, #1
 8001b84:	e007      	b.n	8001b96 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f003 0301 	and.w	r3, r3, #1
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d1d8      	bne.n	8001b46 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001b94:	2300      	movs	r3, #0
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20000004 	.word	0x20000004
 8001ba4:	431bde83 	.word	0x431bde83

08001ba8 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d12e      	bne.n	8001c20 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	689a      	ldr	r2, [r3, #8]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0201 	bic.w	r2, r2, #1
 8001bd0:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001bd2:	f7ff fbd1 	bl	8001378 <HAL_GetTick>
 8001bd6:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001bd8:	e01b      	b.n	8001c12 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001bda:	f7ff fbcd 	bl	8001378 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d914      	bls.n	8001c12 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d10d      	bne.n	8001c12 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bfa:	f043 0210 	orr.w	r2, r3, #16
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c06:	f043 0201 	orr.w	r2, r3, #1
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e007      	b.n	8001c22 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f003 0301 	and.w	r3, r3, #1
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d0dc      	beq.n	8001bda <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
	...

08001c2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b085      	sub	sp, #20
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c3c:	4b0c      	ldr	r3, [pc, #48]	@ (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c42:	68ba      	ldr	r2, [r7, #8]
 8001c44:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c48:	4013      	ands	r3, r2
 8001c4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c50:	68bb      	ldr	r3, [r7, #8]
 8001c52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c54:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001c58:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c5e:	4a04      	ldr	r2, [pc, #16]	@ (8001c70 <__NVIC_SetPriorityGrouping+0x44>)
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	60d3      	str	r3, [r2, #12]
}
 8001c64:	bf00      	nop
 8001c66:	3714      	adds	r7, #20
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c78:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <__NVIC_GetPriorityGrouping+0x18>)
 8001c7a:	68db      	ldr	r3, [r3, #12]
 8001c7c:	0a1b      	lsrs	r3, r3, #8
 8001c7e:	f003 0307 	and.w	r3, r3, #7
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	e000ed00 	.word	0xe000ed00

08001c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	4603      	mov	r3, r0
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	db0a      	blt.n	8001cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	490c      	ldr	r1, [pc, #48]	@ (8001cdc <__NVIC_SetPriority+0x4c>)
 8001caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	b2d2      	uxtb	r2, r2
 8001cb2:	440b      	add	r3, r1
 8001cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cb8:	e00a      	b.n	8001cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	b2da      	uxtb	r2, r3
 8001cbe:	4908      	ldr	r1, [pc, #32]	@ (8001ce0 <__NVIC_SetPriority+0x50>)
 8001cc0:	79fb      	ldrb	r3, [r7, #7]
 8001cc2:	f003 030f 	and.w	r3, r3, #15
 8001cc6:	3b04      	subs	r3, #4
 8001cc8:	0112      	lsls	r2, r2, #4
 8001cca:	b2d2      	uxtb	r2, r2
 8001ccc:	440b      	add	r3, r1
 8001cce:	761a      	strb	r2, [r3, #24]
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	bc80      	pop	{r7}
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	e000e100 	.word	0xe000e100
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b089      	sub	sp, #36	@ 0x24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	60f8      	str	r0, [r7, #12]
 8001cec:	60b9      	str	r1, [r7, #8]
 8001cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f1c3 0307 	rsb	r3, r3, #7
 8001cfe:	2b04      	cmp	r3, #4
 8001d00:	bf28      	it	cs
 8001d02:	2304      	movcs	r3, #4
 8001d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	3304      	adds	r3, #4
 8001d0a:	2b06      	cmp	r3, #6
 8001d0c:	d902      	bls.n	8001d14 <NVIC_EncodePriority+0x30>
 8001d0e:	69fb      	ldr	r3, [r7, #28]
 8001d10:	3b03      	subs	r3, #3
 8001d12:	e000      	b.n	8001d16 <NVIC_EncodePriority+0x32>
 8001d14:	2300      	movs	r3, #0
 8001d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d18:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43da      	mvns	r2, r3
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	401a      	ands	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d2c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	fa01 f303 	lsl.w	r3, r1, r3
 8001d36:	43d9      	mvns	r1, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	4313      	orrs	r3, r2
         );
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3724      	adds	r7, #36	@ 0x24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bc80      	pop	{r7}
 8001d46:	4770      	bx	lr

08001d48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b082      	sub	sp, #8
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	3b01      	subs	r3, #1
 8001d54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001d58:	d301      	bcc.n	8001d5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e00f      	b.n	8001d7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d5e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d88 <SysTick_Config+0x40>)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	3b01      	subs	r3, #1
 8001d64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d66:	210f      	movs	r1, #15
 8001d68:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001d6c:	f7ff ff90 	bl	8001c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d70:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <SysTick_Config+0x40>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d76:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <SysTick_Config+0x40>)
 8001d78:	2207      	movs	r2, #7
 8001d7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	e000e010 	.word	0xe000e010

08001d8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f7ff ff49 	bl	8001c2c <__NVIC_SetPriorityGrouping>
}
 8001d9a:	bf00      	nop
 8001d9c:	3708      	adds	r7, #8
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}

08001da2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001da2:	b580      	push	{r7, lr}
 8001da4:	b086      	sub	sp, #24
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	4603      	mov	r3, r0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607a      	str	r2, [r7, #4]
 8001dae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001db0:	2300      	movs	r3, #0
 8001db2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001db4:	f7ff ff5e 	bl	8001c74 <__NVIC_GetPriorityGrouping>
 8001db8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	68b9      	ldr	r1, [r7, #8]
 8001dbe:	6978      	ldr	r0, [r7, #20]
 8001dc0:	f7ff ff90 	bl	8001ce4 <NVIC_EncodePriority>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dca:	4611      	mov	r1, r2
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff ff5f 	bl	8001c90 <__NVIC_SetPriority>
}
 8001dd2:	bf00      	nop
 8001dd4:	3718      	adds	r7, #24
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dda:	b580      	push	{r7, lr}
 8001ddc:	b082      	sub	sp, #8
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ffb0 	bl	8001d48 <SysTick_Config>
 8001de8:	4603      	mov	r3, r0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
	...

08001df4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001df4:	b480      	push	{r7}
 8001df6:	b08b      	sub	sp, #44	@ 0x2c
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
 8001dfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001e02:	2300      	movs	r3, #0
 8001e04:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e06:	e169      	b.n	80020dc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001e08:	2201      	movs	r2, #1
 8001e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	69fa      	ldr	r2, [r7, #28]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	f040 8158 	bne.w	80020d6 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	4a9a      	ldr	r2, [pc, #616]	@ (8002094 <HAL_GPIO_Init+0x2a0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d05e      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e30:	4a98      	ldr	r2, [pc, #608]	@ (8002094 <HAL_GPIO_Init+0x2a0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d875      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e36:	4a98      	ldr	r2, [pc, #608]	@ (8002098 <HAL_GPIO_Init+0x2a4>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d058      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e3c:	4a96      	ldr	r2, [pc, #600]	@ (8002098 <HAL_GPIO_Init+0x2a4>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d86f      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e42:	4a96      	ldr	r2, [pc, #600]	@ (800209c <HAL_GPIO_Init+0x2a8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d052      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e48:	4a94      	ldr	r2, [pc, #592]	@ (800209c <HAL_GPIO_Init+0x2a8>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d869      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e4e:	4a94      	ldr	r2, [pc, #592]	@ (80020a0 <HAL_GPIO_Init+0x2ac>)
 8001e50:	4293      	cmp	r3, r2
 8001e52:	d04c      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e54:	4a92      	ldr	r2, [pc, #584]	@ (80020a0 <HAL_GPIO_Init+0x2ac>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d863      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e5a:	4a92      	ldr	r2, [pc, #584]	@ (80020a4 <HAL_GPIO_Init+0x2b0>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d046      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
 8001e60:	4a90      	ldr	r2, [pc, #576]	@ (80020a4 <HAL_GPIO_Init+0x2b0>)
 8001e62:	4293      	cmp	r3, r2
 8001e64:	d85d      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e66:	2b12      	cmp	r3, #18
 8001e68:	d82a      	bhi.n	8001ec0 <HAL_GPIO_Init+0xcc>
 8001e6a:	2b12      	cmp	r3, #18
 8001e6c:	d859      	bhi.n	8001f22 <HAL_GPIO_Init+0x12e>
 8001e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8001e74 <HAL_GPIO_Init+0x80>)
 8001e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e74:	08001eef 	.word	0x08001eef
 8001e78:	08001ec9 	.word	0x08001ec9
 8001e7c:	08001edb 	.word	0x08001edb
 8001e80:	08001f1d 	.word	0x08001f1d
 8001e84:	08001f23 	.word	0x08001f23
 8001e88:	08001f23 	.word	0x08001f23
 8001e8c:	08001f23 	.word	0x08001f23
 8001e90:	08001f23 	.word	0x08001f23
 8001e94:	08001f23 	.word	0x08001f23
 8001e98:	08001f23 	.word	0x08001f23
 8001e9c:	08001f23 	.word	0x08001f23
 8001ea0:	08001f23 	.word	0x08001f23
 8001ea4:	08001f23 	.word	0x08001f23
 8001ea8:	08001f23 	.word	0x08001f23
 8001eac:	08001f23 	.word	0x08001f23
 8001eb0:	08001f23 	.word	0x08001f23
 8001eb4:	08001f23 	.word	0x08001f23
 8001eb8:	08001ed1 	.word	0x08001ed1
 8001ebc:	08001ee5 	.word	0x08001ee5
 8001ec0:	4a79      	ldr	r2, [pc, #484]	@ (80020a8 <HAL_GPIO_Init+0x2b4>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d013      	beq.n	8001eee <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001ec6:	e02c      	b.n	8001f22 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	68db      	ldr	r3, [r3, #12]
 8001ecc:	623b      	str	r3, [r7, #32]
          break;
 8001ece:	e029      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001ed0:	683b      	ldr	r3, [r7, #0]
 8001ed2:	68db      	ldr	r3, [r3, #12]
 8001ed4:	3304      	adds	r3, #4
 8001ed6:	623b      	str	r3, [r7, #32]
          break;
 8001ed8:	e024      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001eda:	683b      	ldr	r3, [r7, #0]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	3308      	adds	r3, #8
 8001ee0:	623b      	str	r3, [r7, #32]
          break;
 8001ee2:	e01f      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	330c      	adds	r3, #12
 8001eea:	623b      	str	r3, [r7, #32]
          break;
 8001eec:	e01a      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d102      	bne.n	8001efc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001ef6:	2304      	movs	r3, #4
 8001ef8:	623b      	str	r3, [r7, #32]
          break;
 8001efa:	e013      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001efc:	683b      	ldr	r3, [r7, #0]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d105      	bne.n	8001f10 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f04:	2308      	movs	r3, #8
 8001f06:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	611a      	str	r2, [r3, #16]
          break;
 8001f0e:	e009      	b.n	8001f24 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001f10:	2308      	movs	r3, #8
 8001f12:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	69fa      	ldr	r2, [r7, #28]
 8001f18:	615a      	str	r2, [r3, #20]
          break;
 8001f1a:	e003      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	623b      	str	r3, [r7, #32]
          break;
 8001f20:	e000      	b.n	8001f24 <HAL_GPIO_Init+0x130>
          break;
 8001f22:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2bff      	cmp	r3, #255	@ 0xff
 8001f28:	d801      	bhi.n	8001f2e <HAL_GPIO_Init+0x13a>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	e001      	b.n	8001f32 <HAL_GPIO_Init+0x13e>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	3304      	adds	r3, #4
 8001f32:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	2bff      	cmp	r3, #255	@ 0xff
 8001f38:	d802      	bhi.n	8001f40 <HAL_GPIO_Init+0x14c>
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	e002      	b.n	8001f46 <HAL_GPIO_Init+0x152>
 8001f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f42:	3b08      	subs	r3, #8
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	681a      	ldr	r2, [r3, #0]
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	fa01 f303 	lsl.w	r3, r1, r3
 8001f54:	43db      	mvns	r3, r3
 8001f56:	401a      	ands	r2, r3
 8001f58:	6a39      	ldr	r1, [r7, #32]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001f60:	431a      	orrs	r2, r3
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f000 80b1 	beq.w	80020d6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001f74:	4b4d      	ldr	r3, [pc, #308]	@ (80020ac <HAL_GPIO_Init+0x2b8>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a4c      	ldr	r2, [pc, #304]	@ (80020ac <HAL_GPIO_Init+0x2b8>)
 8001f7a:	f043 0301 	orr.w	r3, r3, #1
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b4a      	ldr	r3, [pc, #296]	@ (80020ac <HAL_GPIO_Init+0x2b8>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f003 0301 	and.w	r3, r3, #1
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001f8c:	4a48      	ldr	r2, [pc, #288]	@ (80020b0 <HAL_GPIO_Init+0x2bc>)
 8001f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	3302      	adds	r3, #2
 8001f94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f98:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9c:	f003 0303 	and.w	r3, r3, #3
 8001fa0:	009b      	lsls	r3, r3, #2
 8001fa2:	220f      	movs	r2, #15
 8001fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fa8:	43db      	mvns	r3, r3
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	4a40      	ldr	r2, [pc, #256]	@ (80020b4 <HAL_GPIO_Init+0x2c0>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d013      	beq.n	8001fe0 <HAL_GPIO_Init+0x1ec>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4a3f      	ldr	r2, [pc, #252]	@ (80020b8 <HAL_GPIO_Init+0x2c4>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d00d      	beq.n	8001fdc <HAL_GPIO_Init+0x1e8>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a3e      	ldr	r2, [pc, #248]	@ (80020bc <HAL_GPIO_Init+0x2c8>)
 8001fc4:	4293      	cmp	r3, r2
 8001fc6:	d007      	beq.n	8001fd8 <HAL_GPIO_Init+0x1e4>
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	4a3d      	ldr	r2, [pc, #244]	@ (80020c0 <HAL_GPIO_Init+0x2cc>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d101      	bne.n	8001fd4 <HAL_GPIO_Init+0x1e0>
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e006      	b.n	8001fe2 <HAL_GPIO_Init+0x1ee>
 8001fd4:	2304      	movs	r3, #4
 8001fd6:	e004      	b.n	8001fe2 <HAL_GPIO_Init+0x1ee>
 8001fd8:	2302      	movs	r3, #2
 8001fda:	e002      	b.n	8001fe2 <HAL_GPIO_Init+0x1ee>
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e000      	b.n	8001fe2 <HAL_GPIO_Init+0x1ee>
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe4:	f002 0203 	and.w	r2, r2, #3
 8001fe8:	0092      	lsls	r2, r2, #2
 8001fea:	4093      	lsls	r3, r2
 8001fec:	68fa      	ldr	r2, [r7, #12]
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ff2:	492f      	ldr	r1, [pc, #188]	@ (80020b0 <HAL_GPIO_Init+0x2bc>)
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ff6:	089b      	lsrs	r3, r3, #2
 8001ff8:	3302      	adds	r3, #2
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d006      	beq.n	800201a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800200c:	4b2d      	ldr	r3, [pc, #180]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	492c      	ldr	r1, [pc, #176]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	4313      	orrs	r3, r2
 8002016:	608b      	str	r3, [r1, #8]
 8002018:	e006      	b.n	8002028 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800201a:	4b2a      	ldr	r3, [pc, #168]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 800201c:	689a      	ldr	r2, [r3, #8]
 800201e:	69bb      	ldr	r3, [r7, #24]
 8002020:	43db      	mvns	r3, r3
 8002022:	4928      	ldr	r1, [pc, #160]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002024:	4013      	ands	r3, r2
 8002026:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d006      	beq.n	8002042 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002034:	4b23      	ldr	r3, [pc, #140]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002036:	68da      	ldr	r2, [r3, #12]
 8002038:	4922      	ldr	r1, [pc, #136]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	4313      	orrs	r3, r2
 800203e:	60cb      	str	r3, [r1, #12]
 8002040:	e006      	b.n	8002050 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002042:	4b20      	ldr	r3, [pc, #128]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002044:	68da      	ldr	r2, [r3, #12]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	43db      	mvns	r3, r3
 800204a:	491e      	ldr	r1, [pc, #120]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 800204c:	4013      	ands	r3, r2
 800204e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d006      	beq.n	800206a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800205c:	4b19      	ldr	r3, [pc, #100]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 800205e:	685a      	ldr	r2, [r3, #4]
 8002060:	4918      	ldr	r1, [pc, #96]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	4313      	orrs	r3, r2
 8002066:	604b      	str	r3, [r1, #4]
 8002068:	e006      	b.n	8002078 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800206a:	4b16      	ldr	r3, [pc, #88]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	69bb      	ldr	r3, [r7, #24]
 8002070:	43db      	mvns	r3, r3
 8002072:	4914      	ldr	r1, [pc, #80]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002074:	4013      	ands	r3, r2
 8002076:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d021      	beq.n	80020c8 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002084:	4b0f      	ldr	r3, [pc, #60]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 8002086:	681a      	ldr	r2, [r3, #0]
 8002088:	490e      	ldr	r1, [pc, #56]	@ (80020c4 <HAL_GPIO_Init+0x2d0>)
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	600b      	str	r3, [r1, #0]
 8002090:	e021      	b.n	80020d6 <HAL_GPIO_Init+0x2e2>
 8002092:	bf00      	nop
 8002094:	10320000 	.word	0x10320000
 8002098:	10310000 	.word	0x10310000
 800209c:	10220000 	.word	0x10220000
 80020a0:	10210000 	.word	0x10210000
 80020a4:	10120000 	.word	0x10120000
 80020a8:	10110000 	.word	0x10110000
 80020ac:	40021000 	.word	0x40021000
 80020b0:	40010000 	.word	0x40010000
 80020b4:	40010800 	.word	0x40010800
 80020b8:	40010c00 	.word	0x40010c00
 80020bc:	40011000 	.word	0x40011000
 80020c0:	40011400 	.word	0x40011400
 80020c4:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80020c8:	4b0b      	ldr	r3, [pc, #44]	@ (80020f8 <HAL_GPIO_Init+0x304>)
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	43db      	mvns	r3, r3
 80020d0:	4909      	ldr	r1, [pc, #36]	@ (80020f8 <HAL_GPIO_Init+0x304>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80020d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020d8:	3301      	adds	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e2:	fa22 f303 	lsr.w	r3, r2, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f47f ae8e 	bne.w	8001e08 <HAL_GPIO_Init+0x14>
  }
}
 80020ec:	bf00      	nop
 80020ee:	bf00      	nop
 80020f0:	372c      	adds	r7, #44	@ 0x2c
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr
 80020f8:	40010400 	.word	0x40010400

080020fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	807b      	strh	r3, [r7, #2]
 8002108:	4613      	mov	r3, r2
 800210a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800210c:	787b      	ldrb	r3, [r7, #1]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d003      	beq.n	800211a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002112:	887a      	ldrh	r2, [r7, #2]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002118:	e003      	b.n	8002122 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800211a:	887b      	ldrh	r3, [r7, #2]
 800211c:	041a      	lsls	r2, r3, #16
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	611a      	str	r2, [r3, #16]
}
 8002122:	bf00      	nop
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr

0800212c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b086      	sub	sp, #24
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e272      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	f003 0301 	and.w	r3, r3, #1
 8002146:	2b00      	cmp	r3, #0
 8002148:	f000 8087 	beq.w	800225a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800214c:	4b92      	ldr	r3, [pc, #584]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 030c 	and.w	r3, r3, #12
 8002154:	2b04      	cmp	r3, #4
 8002156:	d00c      	beq.n	8002172 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002158:	4b8f      	ldr	r3, [pc, #572]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	f003 030c 	and.w	r3, r3, #12
 8002160:	2b08      	cmp	r3, #8
 8002162:	d112      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
 8002164:	4b8c      	ldr	r3, [pc, #560]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800216c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002170:	d10b      	bne.n	800218a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002172:	4b89      	ldr	r3, [pc, #548]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217a:	2b00      	cmp	r3, #0
 800217c:	d06c      	beq.n	8002258 <HAL_RCC_OscConfig+0x12c>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	685b      	ldr	r3, [r3, #4]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d168      	bne.n	8002258 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	e24c      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002192:	d106      	bne.n	80021a2 <HAL_RCC_OscConfig+0x76>
 8002194:	4b80      	ldr	r3, [pc, #512]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a7f      	ldr	r2, [pc, #508]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800219a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800219e:	6013      	str	r3, [r2, #0]
 80021a0:	e02e      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d10c      	bne.n	80021c4 <HAL_RCC_OscConfig+0x98>
 80021aa:	4b7b      	ldr	r3, [pc, #492]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	4a7a      	ldr	r2, [pc, #488]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021b4:	6013      	str	r3, [r2, #0]
 80021b6:	4b78      	ldr	r3, [pc, #480]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a77      	ldr	r2, [pc, #476]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021c0:	6013      	str	r3, [r2, #0]
 80021c2:	e01d      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	685b      	ldr	r3, [r3, #4]
 80021c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80021cc:	d10c      	bne.n	80021e8 <HAL_RCC_OscConfig+0xbc>
 80021ce:	4b72      	ldr	r3, [pc, #456]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	4a71      	ldr	r2, [pc, #452]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80021d8:	6013      	str	r3, [r2, #0]
 80021da:	4b6f      	ldr	r3, [pc, #444]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a6e      	ldr	r2, [pc, #440]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80021e4:	6013      	str	r3, [r2, #0]
 80021e6:	e00b      	b.n	8002200 <HAL_RCC_OscConfig+0xd4>
 80021e8:	4b6b      	ldr	r3, [pc, #428]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4a6a      	ldr	r2, [pc, #424]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80021f2:	6013      	str	r3, [r2, #0]
 80021f4:	4b68      	ldr	r3, [pc, #416]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a67      	ldr	r2, [pc, #412]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80021fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80021fe:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002208:	f7ff f8b6 	bl	8001378 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002210:	f7ff f8b2 	bl	8001378 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b64      	cmp	r3, #100	@ 0x64
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e200      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002222:	4b5d      	ldr	r3, [pc, #372]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0xe4>
 800222e:	e014      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002230:	f7ff f8a2 	bl	8001378 <HAL_GetTick>
 8002234:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002236:	e008      	b.n	800224a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002238:	f7ff f89e 	bl	8001378 <HAL_GetTick>
 800223c:	4602      	mov	r2, r0
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	1ad3      	subs	r3, r2, r3
 8002242:	2b64      	cmp	r3, #100	@ 0x64
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e1ec      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800224a:	4b53      	ldr	r3, [pc, #332]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002252:	2b00      	cmp	r3, #0
 8002254:	d1f0      	bne.n	8002238 <HAL_RCC_OscConfig+0x10c>
 8002256:	e000      	b.n	800225a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002258:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	2b00      	cmp	r3, #0
 8002264:	d063      	beq.n	800232e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002266:	4b4c      	ldr	r3, [pc, #304]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f003 030c 	and.w	r3, r3, #12
 800226e:	2b00      	cmp	r3, #0
 8002270:	d00b      	beq.n	800228a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002272:	4b49      	ldr	r3, [pc, #292]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b08      	cmp	r3, #8
 800227c:	d11c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
 800227e:	4b46      	ldr	r3, [pc, #280]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d116      	bne.n	80022b8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800228a:	4b43      	ldr	r3, [pc, #268]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0302 	and.w	r3, r3, #2
 8002292:	2b00      	cmp	r3, #0
 8002294:	d005      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	691b      	ldr	r3, [r3, #16]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d001      	beq.n	80022a2 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e1c0      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022a2:	4b3d      	ldr	r3, [pc, #244]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	00db      	lsls	r3, r3, #3
 80022b0:	4939      	ldr	r1, [pc, #228]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022b2:	4313      	orrs	r3, r2
 80022b4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022b6:	e03a      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	691b      	ldr	r3, [r3, #16]
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d020      	beq.n	8002302 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80022c0:	4b36      	ldr	r3, [pc, #216]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c6:	f7ff f857 	bl	8001378 <HAL_GetTick>
 80022ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022cc:	e008      	b.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022ce:	f7ff f853 	bl	8001378 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	693b      	ldr	r3, [r7, #16]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	2b02      	cmp	r3, #2
 80022da:	d901      	bls.n	80022e0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80022dc:	2303      	movs	r3, #3
 80022de:	e1a1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d0f0      	beq.n	80022ce <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022ec:	4b2a      	ldr	r3, [pc, #168]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	00db      	lsls	r3, r3, #3
 80022fa:	4927      	ldr	r1, [pc, #156]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	600b      	str	r3, [r1, #0]
 8002300:	e015      	b.n	800232e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002302:	4b26      	ldr	r3, [pc, #152]	@ (800239c <HAL_RCC_OscConfig+0x270>)
 8002304:	2200      	movs	r2, #0
 8002306:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff f836 	bl	8001378 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002310:	f7ff f832 	bl	8001378 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e180      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002322:	4b1d      	ldr	r3, [pc, #116]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1f0      	bne.n	8002310 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0308 	and.w	r3, r3, #8
 8002336:	2b00      	cmp	r3, #0
 8002338:	d03a      	beq.n	80023b0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	699b      	ldr	r3, [r3, #24]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d019      	beq.n	8002376 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002342:	4b17      	ldr	r3, [pc, #92]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002344:	2201      	movs	r2, #1
 8002346:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002348:	f7ff f816 	bl	8001378 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002350:	f7ff f812 	bl	8001378 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e160      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002362:	4b0d      	ldr	r3, [pc, #52]	@ (8002398 <HAL_RCC_OscConfig+0x26c>)
 8002364:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800236e:	2001      	movs	r0, #1
 8002370:	f000 face 	bl	8002910 <RCC_Delay>
 8002374:	e01c      	b.n	80023b0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002376:	4b0a      	ldr	r3, [pc, #40]	@ (80023a0 <HAL_RCC_OscConfig+0x274>)
 8002378:	2200      	movs	r2, #0
 800237a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800237c:	f7fe fffc 	bl	8001378 <HAL_GetTick>
 8002380:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002382:	e00f      	b.n	80023a4 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002384:	f7fe fff8 	bl	8001378 <HAL_GetTick>
 8002388:	4602      	mov	r2, r0
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1ad3      	subs	r3, r2, r3
 800238e:	2b02      	cmp	r3, #2
 8002390:	d908      	bls.n	80023a4 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e146      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	42420000 	.word	0x42420000
 80023a0:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80023a4:	4b92      	ldr	r3, [pc, #584]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023a8:	f003 0302 	and.w	r3, r3, #2
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1e9      	bne.n	8002384 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f003 0304 	and.w	r3, r3, #4
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 80a6 	beq.w	800250a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023c2:	4b8b      	ldr	r3, [pc, #556]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d10d      	bne.n	80023ea <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023ce:	4b88      	ldr	r3, [pc, #544]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d0:	69db      	ldr	r3, [r3, #28]
 80023d2:	4a87      	ldr	r2, [pc, #540]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023d8:	61d3      	str	r3, [r2, #28]
 80023da:	4b85      	ldr	r3, [pc, #532]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80023dc:	69db      	ldr	r3, [r3, #28]
 80023de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023e2:	60bb      	str	r3, [r7, #8]
 80023e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023e6:	2301      	movs	r3, #1
 80023e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023ea:	4b82      	ldr	r3, [pc, #520]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d118      	bne.n	8002428 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80023f6:	4b7f      	ldr	r3, [pc, #508]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a7e      	ldr	r2, [pc, #504]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 80023fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002402:	f7fe ffb9 	bl	8001378 <HAL_GetTick>
 8002406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002408:	e008      	b.n	800241c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800240a:	f7fe ffb5 	bl	8001378 <HAL_GetTick>
 800240e:	4602      	mov	r2, r0
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	1ad3      	subs	r3, r2, r3
 8002414:	2b64      	cmp	r3, #100	@ 0x64
 8002416:	d901      	bls.n	800241c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002418:	2303      	movs	r3, #3
 800241a:	e103      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800241c:	4b75      	ldr	r3, [pc, #468]	@ (80025f4 <HAL_RCC_OscConfig+0x4c8>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0f0      	beq.n	800240a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	2b01      	cmp	r3, #1
 800242e:	d106      	bne.n	800243e <HAL_RCC_OscConfig+0x312>
 8002430:	4b6f      	ldr	r3, [pc, #444]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4a6e      	ldr	r2, [pc, #440]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002436:	f043 0301 	orr.w	r3, r3, #1
 800243a:	6213      	str	r3, [r2, #32]
 800243c:	e02d      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10c      	bne.n	8002460 <HAL_RCC_OscConfig+0x334>
 8002446:	4b6a      	ldr	r3, [pc, #424]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002448:	6a1b      	ldr	r3, [r3, #32]
 800244a:	4a69      	ldr	r2, [pc, #420]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800244c:	f023 0301 	bic.w	r3, r3, #1
 8002450:	6213      	str	r3, [r2, #32]
 8002452:	4b67      	ldr	r3, [pc, #412]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002454:	6a1b      	ldr	r3, [r3, #32]
 8002456:	4a66      	ldr	r2, [pc, #408]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002458:	f023 0304 	bic.w	r3, r3, #4
 800245c:	6213      	str	r3, [r2, #32]
 800245e:	e01c      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	2b05      	cmp	r3, #5
 8002466:	d10c      	bne.n	8002482 <HAL_RCC_OscConfig+0x356>
 8002468:	4b61      	ldr	r3, [pc, #388]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246a:	6a1b      	ldr	r3, [r3, #32]
 800246c:	4a60      	ldr	r2, [pc, #384]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800246e:	f043 0304 	orr.w	r3, r3, #4
 8002472:	6213      	str	r3, [r2, #32]
 8002474:	4b5e      	ldr	r3, [pc, #376]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002476:	6a1b      	ldr	r3, [r3, #32]
 8002478:	4a5d      	ldr	r2, [pc, #372]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800247a:	f043 0301 	orr.w	r3, r3, #1
 800247e:	6213      	str	r3, [r2, #32]
 8002480:	e00b      	b.n	800249a <HAL_RCC_OscConfig+0x36e>
 8002482:	4b5b      	ldr	r3, [pc, #364]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	4a5a      	ldr	r2, [pc, #360]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002488:	f023 0301 	bic.w	r3, r3, #1
 800248c:	6213      	str	r3, [r2, #32]
 800248e:	4b58      	ldr	r3, [pc, #352]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002490:	6a1b      	ldr	r3, [r3, #32]
 8002492:	4a57      	ldr	r2, [pc, #348]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002494:	f023 0304 	bic.w	r3, r3, #4
 8002498:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe ff69 	bl	8001378 <HAL_GetTick>
 80024a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024a8:	e00a      	b.n	80024c0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024aa:	f7fe ff65 	bl	8001378 <HAL_GetTick>
 80024ae:	4602      	mov	r2, r0
 80024b0:	693b      	ldr	r3, [r7, #16]
 80024b2:	1ad3      	subs	r3, r2, r3
 80024b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e0b1      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024c0:	4b4b      	ldr	r3, [pc, #300]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0ee      	beq.n	80024aa <HAL_RCC_OscConfig+0x37e>
 80024cc:	e014      	b.n	80024f8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024ce:	f7fe ff53 	bl	8001378 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024d4:	e00a      	b.n	80024ec <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024d6:	f7fe ff4f 	bl	8001378 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d901      	bls.n	80024ec <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80024e8:	2303      	movs	r3, #3
 80024ea:	e09b      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024ec:	4b40      	ldr	r3, [pc, #256]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80024ee:	6a1b      	ldr	r3, [r3, #32]
 80024f0:	f003 0302 	and.w	r3, r3, #2
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1ee      	bne.n	80024d6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80024f8:	7dfb      	ldrb	r3, [r7, #23]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b3c      	ldr	r3, [pc, #240]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002500:	69db      	ldr	r3, [r3, #28]
 8002502:	4a3b      	ldr	r2, [pc, #236]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002508:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	69db      	ldr	r3, [r3, #28]
 800250e:	2b00      	cmp	r3, #0
 8002510:	f000 8087 	beq.w	8002622 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002514:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	f003 030c 	and.w	r3, r3, #12
 800251c:	2b08      	cmp	r3, #8
 800251e:	d061      	beq.n	80025e4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	69db      	ldr	r3, [r3, #28]
 8002524:	2b02      	cmp	r3, #2
 8002526:	d146      	bne.n	80025b6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002528:	4b33      	ldr	r3, [pc, #204]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800252e:	f7fe ff23 	bl	8001378 <HAL_GetTick>
 8002532:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe ff1f 	bl	8001378 <HAL_GetTick>
 800253a:	4602      	mov	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e06d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002548:	4b29      	ldr	r3, [pc, #164]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a1b      	ldr	r3, [r3, #32]
 8002558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800255c:	d108      	bne.n	8002570 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800255e:	4b24      	ldr	r3, [pc, #144]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	4921      	ldr	r1, [pc, #132]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002570:	4b1f      	ldr	r3, [pc, #124]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6a19      	ldr	r1, [r3, #32]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002580:	430b      	orrs	r3, r1
 8002582:	491b      	ldr	r1, [pc, #108]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 8002584:	4313      	orrs	r3, r2
 8002586:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b1b      	ldr	r3, [pc, #108]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 800258a:	2201      	movs	r2, #1
 800258c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800258e:	f7fe fef3 	bl	8001378 <HAL_GetTick>
 8002592:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002594:	e008      	b.n	80025a8 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002596:	f7fe feef 	bl	8001378 <HAL_GetTick>
 800259a:	4602      	mov	r2, r0
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	1ad3      	subs	r3, r2, r3
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d901      	bls.n	80025a8 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80025a4:	2303      	movs	r3, #3
 80025a6:	e03d      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80025a8:	4b11      	ldr	r3, [pc, #68]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d0f0      	beq.n	8002596 <HAL_RCC_OscConfig+0x46a>
 80025b4:	e035      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025b6:	4b10      	ldr	r3, [pc, #64]	@ (80025f8 <HAL_RCC_OscConfig+0x4cc>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025bc:	f7fe fedc 	bl	8001378 <HAL_GetTick>
 80025c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025c4:	f7fe fed8 	bl	8001378 <HAL_GetTick>
 80025c8:	4602      	mov	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e026      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025d6:	4b06      	ldr	r3, [pc, #24]	@ (80025f0 <HAL_RCC_OscConfig+0x4c4>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0x498>
 80025e2:	e01e      	b.n	8002622 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	69db      	ldr	r3, [r3, #28]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	d107      	bne.n	80025fc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e019      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
 80025f0:	40021000 	.word	0x40021000
 80025f4:	40007000 	.word	0x40007000
 80025f8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80025fc:	4b0b      	ldr	r3, [pc, #44]	@ (800262c <HAL_RCC_OscConfig+0x500>)
 80025fe:	685b      	ldr	r3, [r3, #4]
 8002600:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a1b      	ldr	r3, [r3, #32]
 800260c:	429a      	cmp	r2, r3
 800260e:	d106      	bne.n	800261e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800261a:	429a      	cmp	r2, r3
 800261c:	d001      	beq.n	8002622 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e000      	b.n	8002624 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002622:	2300      	movs	r3, #0
}
 8002624:	4618      	mov	r0, r3
 8002626:	3718      	adds	r7, #24
 8002628:	46bd      	mov	sp, r7
 800262a:	bd80      	pop	{r7, pc}
 800262c:	40021000 	.word	0x40021000

08002630 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
 8002638:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e0d0      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002644:	4b6a      	ldr	r3, [pc, #424]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0307 	and.w	r3, r3, #7
 800264c:	683a      	ldr	r2, [r7, #0]
 800264e:	429a      	cmp	r2, r3
 8002650:	d910      	bls.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002652:	4b67      	ldr	r3, [pc, #412]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	4965      	ldr	r1, [pc, #404]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	4313      	orrs	r3, r2
 8002660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002662:	4b63      	ldr	r3, [pc, #396]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 0307 	and.w	r3, r3, #7
 800266a:	683a      	ldr	r2, [r7, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d001      	beq.n	8002674 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	e0b8      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b00      	cmp	r3, #0
 800267e:	d020      	beq.n	80026c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f003 0304 	and.w	r3, r3, #4
 8002688:	2b00      	cmp	r3, #0
 800268a:	d005      	beq.n	8002698 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800268c:	4b59      	ldr	r3, [pc, #356]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	4a58      	ldr	r2, [pc, #352]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002692:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002696:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0308 	and.w	r3, r3, #8
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d005      	beq.n	80026b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80026a4:	4b53      	ldr	r3, [pc, #332]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	4a52      	ldr	r2, [pc, #328]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80026ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80026b0:	4b50      	ldr	r3, [pc, #320]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	494d      	ldr	r1, [pc, #308]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026be:	4313      	orrs	r3, r2
 80026c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f003 0301 	and.w	r3, r3, #1
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d040      	beq.n	8002750 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d107      	bne.n	80026e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80026d6:	4b47      	ldr	r3, [pc, #284]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d115      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e07f      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d107      	bne.n	80026fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80026ee:	4b41      	ldr	r3, [pc, #260]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d109      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e073      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fe:	4b3d      	ldr	r3, [pc, #244]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f003 0302 	and.w	r3, r3, #2
 8002706:	2b00      	cmp	r3, #0
 8002708:	d101      	bne.n	800270e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	e06b      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800270e:	4b39      	ldr	r3, [pc, #228]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f023 0203 	bic.w	r2, r3, #3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	4936      	ldr	r1, [pc, #216]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800271c:	4313      	orrs	r3, r2
 800271e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002720:	f7fe fe2a 	bl	8001378 <HAL_GetTick>
 8002724:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002726:	e00a      	b.n	800273e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002728:	f7fe fe26 	bl	8001378 <HAL_GetTick>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	1ad3      	subs	r3, r2, r3
 8002732:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002736:	4293      	cmp	r3, r2
 8002738:	d901      	bls.n	800273e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e053      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800273e:	4b2d      	ldr	r3, [pc, #180]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	f003 020c 	and.w	r2, r3, #12
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	429a      	cmp	r2, r3
 800274e:	d1eb      	bne.n	8002728 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002750:	4b27      	ldr	r3, [pc, #156]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	683a      	ldr	r2, [r7, #0]
 800275a:	429a      	cmp	r2, r3
 800275c:	d210      	bcs.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800275e:	4b24      	ldr	r3, [pc, #144]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 0207 	bic.w	r2, r3, #7
 8002766:	4922      	ldr	r1, [pc, #136]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	4313      	orrs	r3, r2
 800276c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800276e:	4b20      	ldr	r3, [pc, #128]	@ (80027f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 0307 	and.w	r3, r3, #7
 8002776:	683a      	ldr	r2, [r7, #0]
 8002778:	429a      	cmp	r2, r3
 800277a:	d001      	beq.n	8002780 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b00      	cmp	r3, #0
 800278a:	d008      	beq.n	800279e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800278c:	4b19      	ldr	r3, [pc, #100]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	68db      	ldr	r3, [r3, #12]
 8002798:	4916      	ldr	r1, [pc, #88]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 800279a:	4313      	orrs	r3, r2
 800279c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80027aa:	4b12      	ldr	r3, [pc, #72]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	490e      	ldr	r1, [pc, #56]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80027be:	f000 f821 	bl	8002804 <HAL_RCC_GetSysClockFreq>
 80027c2:	4602      	mov	r2, r0
 80027c4:	4b0b      	ldr	r3, [pc, #44]	@ (80027f4 <HAL_RCC_ClockConfig+0x1c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	091b      	lsrs	r3, r3, #4
 80027ca:	f003 030f 	and.w	r3, r3, #15
 80027ce:	490a      	ldr	r1, [pc, #40]	@ (80027f8 <HAL_RCC_ClockConfig+0x1c8>)
 80027d0:	5ccb      	ldrb	r3, [r1, r3]
 80027d2:	fa22 f303 	lsr.w	r3, r2, r3
 80027d6:	4a09      	ldr	r2, [pc, #36]	@ (80027fc <HAL_RCC_ClockConfig+0x1cc>)
 80027d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80027da:	4b09      	ldr	r3, [pc, #36]	@ (8002800 <HAL_RCC_ClockConfig+0x1d0>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4618      	mov	r0, r3
 80027e0:	f7fe fd88 	bl	80012f4 <HAL_InitTick>

  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40022000 	.word	0x40022000
 80027f4:	40021000 	.word	0x40021000
 80027f8:	0800430c 	.word	0x0800430c
 80027fc:	20000004 	.word	0x20000004
 8002800:	20000008 	.word	0x20000008

08002804 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002804:	b480      	push	{r7}
 8002806:	b087      	sub	sp, #28
 8002808:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800280a:	2300      	movs	r3, #0
 800280c:	60fb      	str	r3, [r7, #12]
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	2300      	movs	r3, #0
 8002814:	617b      	str	r3, [r7, #20]
 8002816:	2300      	movs	r3, #0
 8002818:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800281a:	2300      	movs	r3, #0
 800281c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800281e:	4b1e      	ldr	r3, [pc, #120]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f003 030c 	and.w	r3, r3, #12
 800282a:	2b04      	cmp	r3, #4
 800282c:	d002      	beq.n	8002834 <HAL_RCC_GetSysClockFreq+0x30>
 800282e:	2b08      	cmp	r3, #8
 8002830:	d003      	beq.n	800283a <HAL_RCC_GetSysClockFreq+0x36>
 8002832:	e027      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002834:	4b19      	ldr	r3, [pc, #100]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002836:	613b      	str	r3, [r7, #16]
      break;
 8002838:	e027      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	0c9b      	lsrs	r3, r3, #18
 800283e:	f003 030f 	and.w	r3, r3, #15
 8002842:	4a17      	ldr	r2, [pc, #92]	@ (80028a0 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002844:	5cd3      	ldrb	r3, [r2, r3]
 8002846:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284e:	2b00      	cmp	r3, #0
 8002850:	d010      	beq.n	8002874 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002852:	4b11      	ldr	r3, [pc, #68]	@ (8002898 <HAL_RCC_GetSysClockFreq+0x94>)
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	0c5b      	lsrs	r3, r3, #17
 8002858:	f003 0301 	and.w	r3, r3, #1
 800285c:	4a11      	ldr	r2, [pc, #68]	@ (80028a4 <HAL_RCC_GetSysClockFreq+0xa0>)
 800285e:	5cd3      	ldrb	r3, [r2, r3]
 8002860:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	4a0d      	ldr	r2, [pc, #52]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002866:	fb03 f202 	mul.w	r2, r3, r2
 800286a:	68bb      	ldr	r3, [r7, #8]
 800286c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002870:	617b      	str	r3, [r7, #20]
 8002872:	e004      	b.n	800287e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	4a0c      	ldr	r2, [pc, #48]	@ (80028a8 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002878:	fb02 f303 	mul.w	r3, r2, r3
 800287c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	613b      	str	r3, [r7, #16]
      break;
 8002882:	e002      	b.n	800288a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002884:	4b05      	ldr	r3, [pc, #20]	@ (800289c <HAL_RCC_GetSysClockFreq+0x98>)
 8002886:	613b      	str	r3, [r7, #16]
      break;
 8002888:	bf00      	nop
    }
  }
  return sysclockfreq;
 800288a:	693b      	ldr	r3, [r7, #16]
}
 800288c:	4618      	mov	r0, r3
 800288e:	371c      	adds	r7, #28
 8002890:	46bd      	mov	sp, r7
 8002892:	bc80      	pop	{r7}
 8002894:	4770      	bx	lr
 8002896:	bf00      	nop
 8002898:	40021000 	.word	0x40021000
 800289c:	007a1200 	.word	0x007a1200
 80028a0:	08004324 	.word	0x08004324
 80028a4:	08004334 	.word	0x08004334
 80028a8:	003d0900 	.word	0x003d0900

080028ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028ac:	b480      	push	{r7}
 80028ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028b0:	4b02      	ldr	r3, [pc, #8]	@ (80028bc <HAL_RCC_GetHCLKFreq+0x10>)
 80028b2:	681b      	ldr	r3, [r3, #0]
}
 80028b4:	4618      	mov	r0, r3
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bc80      	pop	{r7}
 80028ba:	4770      	bx	lr
 80028bc:	20000004 	.word	0x20000004

080028c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80028c4:	f7ff fff2 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028c8:	4602      	mov	r2, r0
 80028ca:	4b05      	ldr	r3, [pc, #20]	@ (80028e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	0a1b      	lsrs	r3, r3, #8
 80028d0:	f003 0307 	and.w	r3, r3, #7
 80028d4:	4903      	ldr	r1, [pc, #12]	@ (80028e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80028d6:	5ccb      	ldrb	r3, [r1, r3]
 80028d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028dc:	4618      	mov	r0, r3
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000
 80028e4:	0800431c 	.word	0x0800431c

080028e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80028ec:	f7ff ffde 	bl	80028ac <HAL_RCC_GetHCLKFreq>
 80028f0:	4602      	mov	r2, r0
 80028f2:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_RCC_GetPCLK2Freq+0x20>)
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	0adb      	lsrs	r3, r3, #11
 80028f8:	f003 0307 	and.w	r3, r3, #7
 80028fc:	4903      	ldr	r1, [pc, #12]	@ (800290c <HAL_RCC_GetPCLK2Freq+0x24>)
 80028fe:	5ccb      	ldrb	r3, [r1, r3]
 8002900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002904:	4618      	mov	r0, r3
 8002906:	bd80      	pop	{r7, pc}
 8002908:	40021000 	.word	0x40021000
 800290c:	0800431c 	.word	0x0800431c

08002910 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002910:	b480      	push	{r7}
 8002912:	b085      	sub	sp, #20
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002918:	4b0a      	ldr	r3, [pc, #40]	@ (8002944 <RCC_Delay+0x34>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a0a      	ldr	r2, [pc, #40]	@ (8002948 <RCC_Delay+0x38>)
 800291e:	fba2 2303 	umull	r2, r3, r2, r3
 8002922:	0a5b      	lsrs	r3, r3, #9
 8002924:	687a      	ldr	r2, [r7, #4]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800292c:	bf00      	nop
  }
  while (Delay --);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	1e5a      	subs	r2, r3, #1
 8002932:	60fa      	str	r2, [r7, #12]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d1f9      	bne.n	800292c <RCC_Delay+0x1c>
}
 8002938:	bf00      	nop
 800293a:	bf00      	nop
 800293c:	3714      	adds	r7, #20
 800293e:	46bd      	mov	sp, r7
 8002940:	bc80      	pop	{r7}
 8002942:	4770      	bx	lr
 8002944:	20000004 	.word	0x20000004
 8002948:	10624dd3 	.word	0x10624dd3

0800294c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b086      	sub	sp, #24
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002954:	2300      	movs	r3, #0
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0301 	and.w	r3, r3, #1
 8002964:	2b00      	cmp	r3, #0
 8002966:	d07d      	beq.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002968:	2300      	movs	r3, #0
 800296a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296c:	4b4f      	ldr	r3, [pc, #316]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800296e:	69db      	ldr	r3, [r3, #28]
 8002970:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10d      	bne.n	8002994 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002978:	4b4c      	ldr	r3, [pc, #304]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297a:	69db      	ldr	r3, [r3, #28]
 800297c:	4a4b      	ldr	r2, [pc, #300]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800297e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002982:	61d3      	str	r3, [r2, #28]
 8002984:	4b49      	ldr	r3, [pc, #292]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002986:	69db      	ldr	r3, [r3, #28]
 8002988:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002990:	2301      	movs	r3, #1
 8002992:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002994:	4b46      	ldr	r3, [pc, #280]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800299c:	2b00      	cmp	r3, #0
 800299e:	d118      	bne.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029a0:	4b43      	ldr	r3, [pc, #268]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a42      	ldr	r2, [pc, #264]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80029aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029ac:	f7fe fce4 	bl	8001378 <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b2:	e008      	b.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b4:	f7fe fce0 	bl	8001378 <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	@ 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e06d      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c6:	4b3a      	ldr	r3, [pc, #232]	@ (8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0f0      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80029d2:	4b36      	ldr	r3, [pc, #216]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029d4:	6a1b      	ldr	r3, [r3, #32]
 80029d6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029da:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d02e      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d027      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80029f0:	4b2e      	ldr	r3, [pc, #184]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80029f2:	6a1b      	ldr	r3, [r3, #32]
 80029f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80029f8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80029fa:	4b2e      	ldr	r3, [pc, #184]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002a00:	4b2c      	ldr	r3, [pc, #176]	@ (8002ab4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002a06:	4a29      	ldr	r2, [pc, #164]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f003 0301 	and.w	r3, r3, #1
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d014      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a16:	f7fe fcaf 	bl	8001378 <HAL_GetTick>
 8002a1a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a1c:	e00a      	b.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a1e:	f7fe fcab 	bl	8001378 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	693b      	ldr	r3, [r7, #16]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a2c:	4293      	cmp	r3, r2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e036      	b.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a34:	4b1d      	ldr	r3, [pc, #116]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a36:	6a1b      	ldr	r3, [r3, #32]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d0ee      	beq.n	8002a1e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a40:	4b1a      	ldr	r3, [pc, #104]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	685b      	ldr	r3, [r3, #4]
 8002a4c:	4917      	ldr	r1, [pc, #92]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002a52:	7dfb      	ldrb	r3, [r7, #23]
 8002a54:	2b01      	cmp	r3, #1
 8002a56:	d105      	bne.n	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a58:	4b14      	ldr	r3, [pc, #80]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5a:	69db      	ldr	r3, [r3, #28]
 8002a5c:	4a13      	ldr	r2, [pc, #76]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002a62:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0302 	and.w	r3, r3, #2
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d008      	beq.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a70:	4b0e      	ldr	r3, [pc, #56]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	490b      	ldr	r1, [pc, #44]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0310 	and.w	r3, r3, #16
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d008      	beq.n	8002aa0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a8e:	4b07      	ldr	r3, [pc, #28]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	4904      	ldr	r1, [pc, #16]	@ (8002aac <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40021000 	.word	0x40021000
 8002ab0:	40007000 	.word	0x40007000
 8002ab4:	42420440 	.word	0x42420440

08002ab8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	617b      	str	r3, [r7, #20]
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	61fb      	str	r3, [r7, #28]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	2300      	movs	r3, #0
 8002ad2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b10      	cmp	r3, #16
 8002ade:	f200 808a 	bhi.w	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d045      	beq.n	8002b74 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b02      	cmp	r3, #2
 8002aec:	d075      	beq.n	8002bda <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002aee:	e082      	b.n	8002bf6 <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002af0:	4b46      	ldr	r3, [pc, #280]	@ (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002af6:	4b45      	ldr	r3, [pc, #276]	@ (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d07b      	beq.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	0c9b      	lsrs	r3, r3, #18
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	4a41      	ldr	r2, [pc, #260]	@ (8002c10 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002b0c:	5cd3      	ldrb	r3, [r2, r3]
 8002b0e:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d015      	beq.n	8002b46 <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b1a:	4b3c      	ldr	r3, [pc, #240]	@ (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b1c:	685b      	ldr	r3, [r3, #4]
 8002b1e:	0c5b      	lsrs	r3, r3, #17
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	4a3b      	ldr	r2, [pc, #236]	@ (8002c14 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002b26:	5cd3      	ldrb	r3, [r2, r3]
 8002b28:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00d      	beq.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002b34:	4a38      	ldr	r2, [pc, #224]	@ (8002c18 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	fbb2 f2f3 	udiv	r2, r2, r3
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	fb02 f303 	mul.w	r3, r2, r3
 8002b42:	61fb      	str	r3, [r7, #28]
 8002b44:	e004      	b.n	8002b50 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	4a34      	ldr	r2, [pc, #208]	@ (8002c1c <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002b4a:	fb02 f303 	mul.w	r3, r2, r3
 8002b4e:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002b50:	4b2e      	ldr	r3, [pc, #184]	@ (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b58:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b5c:	d102      	bne.n	8002b64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002b5e:	69fb      	ldr	r3, [r7, #28]
 8002b60:	61bb      	str	r3, [r7, #24]
      break;
 8002b62:	e04a      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4a2d      	ldr	r2, [pc, #180]	@ (8002c20 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002b6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6e:	085b      	lsrs	r3, r3, #1
 8002b70:	61bb      	str	r3, [r7, #24]
      break;
 8002b72:	e042      	b.n	8002bfa <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002b74:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b80:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002b84:	d108      	bne.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	f003 0302 	and.w	r3, r3, #2
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002b90:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002b94:	61bb      	str	r3, [r7, #24]
 8002b96:	e01f      	b.n	8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b9e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ba2:	d109      	bne.n	8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002ba4:	4b19      	ldr	r3, [pc, #100]	@ (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ba8:	f003 0302 	and.w	r3, r3, #2
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d003      	beq.n	8002bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002bb0:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002bb4:	61bb      	str	r3, [r7, #24]
 8002bb6:	e00f      	b.n	8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bbe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002bc2:	d11c      	bne.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bc4:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d016      	beq.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002bd0:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002bd4:	61bb      	str	r3, [r7, #24]
      break;
 8002bd6:	e012      	b.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002bd8:	e011      	b.n	8002bfe <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002bda:	f7ff fe85 	bl	80028e8 <HAL_RCC_GetPCLK2Freq>
 8002bde:	4602      	mov	r2, r0
 8002be0:	4b0a      	ldr	r3, [pc, #40]	@ (8002c0c <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	0b9b      	lsrs	r3, r3, #14
 8002be6:	f003 0303 	and.w	r3, r3, #3
 8002bea:	3301      	adds	r3, #1
 8002bec:	005b      	lsls	r3, r3, #1
 8002bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf2:	61bb      	str	r3, [r7, #24]
      break;
 8002bf4:	e004      	b.n	8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bf6:	bf00      	nop
 8002bf8:	e002      	b.n	8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bfa:	bf00      	nop
 8002bfc:	e000      	b.n	8002c00 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002bfe:	bf00      	nop
    }
  }
  return (frequency);
 8002c00:	69bb      	ldr	r3, [r7, #24]
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	3720      	adds	r7, #32
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	08004338 	.word	0x08004338
 8002c14:	08004348 	.word	0x08004348
 8002c18:	007a1200 	.word	0x007a1200
 8002c1c:	003d0900 	.word	0x003d0900
 8002c20:	aaaaaaab 	.word	0xaaaaaaab

08002c24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b082      	sub	sp, #8
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d101      	bne.n	8002c36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c32:	2301      	movs	r3, #1
 8002c34:	e041      	b.n	8002cba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d106      	bne.n	8002c50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7fe fa4e 	bl	80010ec <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2202      	movs	r2, #2
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3304      	adds	r3, #4
 8002c60:	4619      	mov	r1, r3
 8002c62:	4610      	mov	r0, r2
 8002c64:	f000 f992 	bl	8002f8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2201      	movs	r2, #1
 8002c74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2201      	movs	r2, #1
 8002c94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2201      	movs	r2, #1
 8002cb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3708      	adds	r7, #8
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b084      	sub	sp, #16
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d109      	bne.n	8002ce8 <HAL_TIM_PWM_Start+0x24>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	bf14      	ite	ne
 8002ce0:	2301      	movne	r3, #1
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	e022      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	2b04      	cmp	r3, #4
 8002cec:	d109      	bne.n	8002d02 <HAL_TIM_PWM_Start+0x3e>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	bf14      	ite	ne
 8002cfa:	2301      	movne	r3, #1
 8002cfc:	2300      	moveq	r3, #0
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	e015      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	2b08      	cmp	r3, #8
 8002d06:	d109      	bne.n	8002d1c <HAL_TIM_PWM_Start+0x58>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	2b01      	cmp	r3, #1
 8002d12:	bf14      	ite	ne
 8002d14:	2301      	movne	r3, #1
 8002d16:	2300      	moveq	r3, #0
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	e008      	b.n	8002d2e <HAL_TIM_PWM_Start+0x6a>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002d22:	b2db      	uxtb	r3, r3
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	bf14      	ite	ne
 8002d28:	2301      	movne	r3, #1
 8002d2a:	2300      	moveq	r3, #0
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d001      	beq.n	8002d36 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002d32:	2301      	movs	r3, #1
 8002d34:	e05e      	b.n	8002df4 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d104      	bne.n	8002d46 <HAL_TIM_PWM_Start+0x82>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2202      	movs	r2, #2
 8002d40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d44:	e013      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	2b04      	cmp	r3, #4
 8002d4a:	d104      	bne.n	8002d56 <HAL_TIM_PWM_Start+0x92>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2202      	movs	r2, #2
 8002d50:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d54:	e00b      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d56:	683b      	ldr	r3, [r7, #0]
 8002d58:	2b08      	cmp	r3, #8
 8002d5a:	d104      	bne.n	8002d66 <HAL_TIM_PWM_Start+0xa2>
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2202      	movs	r2, #2
 8002d60:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d64:	e003      	b.n	8002d6e <HAL_TIM_PWM_Start+0xaa>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2202      	movs	r2, #2
 8002d6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2201      	movs	r2, #1
 8002d74:	6839      	ldr	r1, [r7, #0]
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fafe 	bl	8003378 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a1e      	ldr	r2, [pc, #120]	@ (8002dfc <HAL_TIM_PWM_Start+0x138>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002d94:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a18      	ldr	r2, [pc, #96]	@ (8002dfc <HAL_TIM_PWM_Start+0x138>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d00e      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xfa>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002da8:	d009      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xfa>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a14      	ldr	r2, [pc, #80]	@ (8002e00 <HAL_TIM_PWM_Start+0x13c>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d004      	beq.n	8002dbe <HAL_TIM_PWM_Start+0xfa>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a12      	ldr	r2, [pc, #72]	@ (8002e04 <HAL_TIM_PWM_Start+0x140>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d111      	bne.n	8002de2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2b06      	cmp	r3, #6
 8002dce:	d010      	beq.n	8002df2 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f042 0201 	orr.w	r2, r2, #1
 8002dde:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002de0:	e007      	b.n	8002df2 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f042 0201 	orr.w	r2, r2, #1
 8002df0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002df2:	2300      	movs	r3, #0
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3710      	adds	r7, #16
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40012c00 	.word	0x40012c00
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800

08002e08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b086      	sub	sp, #24
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e14:	2300      	movs	r3, #0
 8002e16:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d101      	bne.n	8002e26 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e22:	2302      	movs	r3, #2
 8002e24:	e0ae      	b.n	8002f84 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	2201      	movs	r2, #1
 8002e2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	f200 809f 	bhi.w	8002f74 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e36:	a201      	add	r2, pc, #4	@ (adr r2, 8002e3c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e3c:	08002e71 	.word	0x08002e71
 8002e40:	08002f75 	.word	0x08002f75
 8002e44:	08002f75 	.word	0x08002f75
 8002e48:	08002f75 	.word	0x08002f75
 8002e4c:	08002eb1 	.word	0x08002eb1
 8002e50:	08002f75 	.word	0x08002f75
 8002e54:	08002f75 	.word	0x08002f75
 8002e58:	08002f75 	.word	0x08002f75
 8002e5c:	08002ef3 	.word	0x08002ef3
 8002e60:	08002f75 	.word	0x08002f75
 8002e64:	08002f75 	.word	0x08002f75
 8002e68:	08002f75 	.word	0x08002f75
 8002e6c:	08002f33 	.word	0x08002f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	68b9      	ldr	r1, [r7, #8]
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f8f6 	bl	8003068 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	699a      	ldr	r2, [r3, #24]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f042 0208 	orr.w	r2, r2, #8
 8002e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	699a      	ldr	r2, [r3, #24]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0204 	bic.w	r2, r2, #4
 8002e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	6999      	ldr	r1, [r3, #24]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	691a      	ldr	r2, [r3, #16]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	619a      	str	r2, [r3, #24]
      break;
 8002eae:	e064      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68b9      	ldr	r1, [r7, #8]
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	f000 f93c 	bl	8003134 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	699a      	ldr	r2, [r3, #24]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	699a      	ldr	r2, [r3, #24]
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	6999      	ldr	r1, [r3, #24]
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	691b      	ldr	r3, [r3, #16]
 8002ee6:	021a      	lsls	r2, r3, #8
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	430a      	orrs	r2, r1
 8002eee:	619a      	str	r2, [r3, #24]
      break;
 8002ef0:	e043      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68b9      	ldr	r1, [r7, #8]
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f000 f985 	bl	8003208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	69da      	ldr	r2, [r3, #28]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0208 	orr.w	r2, r2, #8
 8002f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	69da      	ldr	r2, [r3, #28]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 0204 	bic.w	r2, r2, #4
 8002f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69d9      	ldr	r1, [r3, #28]
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	691a      	ldr	r2, [r3, #16]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	430a      	orrs	r2, r1
 8002f2e:	61da      	str	r2, [r3, #28]
      break;
 8002f30:	e023      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68b9      	ldr	r1, [r7, #8]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f000 f9cf 	bl	80032dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69da      	ldr	r2, [r3, #28]
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	69da      	ldr	r2, [r3, #28]
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69d9      	ldr	r1, [r3, #28]
 8002f64:	68bb      	ldr	r3, [r7, #8]
 8002f66:	691b      	ldr	r3, [r3, #16]
 8002f68:	021a      	lsls	r2, r3, #8
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	61da      	str	r2, [r3, #28]
      break;
 8002f72:	e002      	b.n	8002f7a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	75fb      	strb	r3, [r7, #23]
      break;
 8002f78:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002f82:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	4a2f      	ldr	r2, [pc, #188]	@ (800305c <TIM_Base_SetConfig+0xd0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d00b      	beq.n	8002fbc <TIM_Base_SetConfig+0x30>
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002faa:	d007      	beq.n	8002fbc <TIM_Base_SetConfig+0x30>
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	4a2c      	ldr	r2, [pc, #176]	@ (8003060 <TIM_Base_SetConfig+0xd4>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d003      	beq.n	8002fbc <TIM_Base_SetConfig+0x30>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	4a2b      	ldr	r2, [pc, #172]	@ (8003064 <TIM_Base_SetConfig+0xd8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d108      	bne.n	8002fce <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68fa      	ldr	r2, [r7, #12]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a22      	ldr	r2, [pc, #136]	@ (800305c <TIM_Base_SetConfig+0xd0>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_Base_SetConfig+0x62>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fdc:	d007      	beq.n	8002fee <TIM_Base_SetConfig+0x62>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a1f      	ldr	r2, [pc, #124]	@ (8003060 <TIM_Base_SetConfig+0xd4>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_Base_SetConfig+0x62>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a1e      	ldr	r2, [pc, #120]	@ (8003064 <TIM_Base_SetConfig+0xd8>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0d      	ldr	r2, [pc, #52]	@ (800305c <TIM_Base_SetConfig+0xd0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d103      	bne.n	8003034 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	691a      	ldr	r2, [r3, #16]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d005      	beq.n	8003052 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f023 0201 	bic.w	r2, r3, #1
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	611a      	str	r2, [r3, #16]
  }
}
 8003052:	bf00      	nop
 8003054:	3714      	adds	r7, #20
 8003056:	46bd      	mov	sp, r7
 8003058:	bc80      	pop	{r7}
 800305a:	4770      	bx	lr
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800

08003068 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003068:	b480      	push	{r7}
 800306a:	b087      	sub	sp, #28
 800306c:	af00      	add	r7, sp, #0
 800306e:	6078      	str	r0, [r7, #4]
 8003070:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a1b      	ldr	r3, [r3, #32]
 8003076:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a1b      	ldr	r3, [r3, #32]
 800307c:	f023 0201 	bic.w	r2, r3, #1
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	699b      	ldr	r3, [r3, #24]
 800308e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003096:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	f023 0303 	bic.w	r3, r3, #3
 800309e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f023 0302 	bic.w	r3, r3, #2
 80030b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	697a      	ldr	r2, [r7, #20]
 80030b8:	4313      	orrs	r3, r2
 80030ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a1c      	ldr	r2, [pc, #112]	@ (8003130 <TIM_OC1_SetConfig+0xc8>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d10c      	bne.n	80030de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	f023 0308 	bic.w	r3, r3, #8
 80030ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	68db      	ldr	r3, [r3, #12]
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4313      	orrs	r3, r2
 80030d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	f023 0304 	bic.w	r3, r3, #4
 80030dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a13      	ldr	r2, [pc, #76]	@ (8003130 <TIM_OC1_SetConfig+0xc8>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d111      	bne.n	800310a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80030e6:	693b      	ldr	r3, [r7, #16]
 80030e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80030ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80030f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	699b      	ldr	r3, [r3, #24]
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4313      	orrs	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	693a      	ldr	r2, [r7, #16]
 800310e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	68fa      	ldr	r2, [r7, #12]
 8003114:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	685a      	ldr	r2, [r3, #4]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	621a      	str	r2, [r3, #32]
}
 8003124:	bf00      	nop
 8003126:	371c      	adds	r7, #28
 8003128:	46bd      	mov	sp, r7
 800312a:	bc80      	pop	{r7}
 800312c:	4770      	bx	lr
 800312e:	bf00      	nop
 8003130:	40012c00 	.word	0x40012c00

08003134 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003134:	b480      	push	{r7}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
 800313c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a1b      	ldr	r3, [r3, #32]
 8003148:	f023 0210 	bic.w	r2, r3, #16
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800316a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	021b      	lsls	r3, r3, #8
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	4313      	orrs	r3, r2
 8003176:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003178:	697b      	ldr	r3, [r7, #20]
 800317a:	f023 0320 	bic.w	r3, r3, #32
 800317e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	697a      	ldr	r2, [r7, #20]
 8003188:	4313      	orrs	r3, r2
 800318a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a1d      	ldr	r2, [pc, #116]	@ (8003204 <TIM_OC2_SetConfig+0xd0>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d10d      	bne.n	80031b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003194:	697b      	ldr	r3, [r7, #20]
 8003196:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800319a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	011b      	lsls	r3, r3, #4
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80031ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a14      	ldr	r2, [pc, #80]	@ (8003204 <TIM_OC2_SetConfig+0xd0>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d113      	bne.n	80031e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80031b8:	693b      	ldr	r3, [r7, #16]
 80031ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80031be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80031c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	693a      	ldr	r2, [r7, #16]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	699b      	ldr	r3, [r3, #24]
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	693a      	ldr	r2, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	693a      	ldr	r2, [r7, #16]
 80031e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	68fa      	ldr	r2, [r7, #12]
 80031ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685a      	ldr	r2, [r3, #4]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	697a      	ldr	r2, [r7, #20]
 80031f8:	621a      	str	r2, [r3, #32]
}
 80031fa:	bf00      	nop
 80031fc:	371c      	adds	r7, #28
 80031fe:	46bd      	mov	sp, r7
 8003200:	bc80      	pop	{r7}
 8003202:	4770      	bx	lr
 8003204:	40012c00 	.word	0x40012c00

08003208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003208:	b480      	push	{r7}
 800320a:	b087      	sub	sp, #28
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6a1b      	ldr	r3, [r3, #32]
 8003216:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a1b      	ldr	r3, [r3, #32]
 800321c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	69db      	ldr	r3, [r3, #28]
 800322e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	f023 0303 	bic.w	r3, r3, #3
 800323e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800324a:	697b      	ldr	r3, [r7, #20]
 800324c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	021b      	lsls	r3, r3, #8
 8003258:	697a      	ldr	r2, [r7, #20]
 800325a:	4313      	orrs	r3, r2
 800325c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a1d      	ldr	r2, [pc, #116]	@ (80032d8 <TIM_OC3_SetConfig+0xd0>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d10d      	bne.n	8003282 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003266:	697b      	ldr	r3, [r7, #20]
 8003268:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800326c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	68db      	ldr	r3, [r3, #12]
 8003272:	021b      	lsls	r3, r3, #8
 8003274:	697a      	ldr	r2, [r7, #20]
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	4a14      	ldr	r2, [pc, #80]	@ (80032d8 <TIM_OC3_SetConfig+0xd0>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d113      	bne.n	80032b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	011b      	lsls	r3, r3, #4
 80032a0:	693a      	ldr	r2, [r7, #16]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	693a      	ldr	r2, [r7, #16]
 80032ae:	4313      	orrs	r3, r2
 80032b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	693a      	ldr	r2, [r7, #16]
 80032b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	68fa      	ldr	r2, [r7, #12]
 80032bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	685a      	ldr	r2, [r3, #4]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	697a      	ldr	r2, [r7, #20]
 80032ca:	621a      	str	r2, [r3, #32]
}
 80032cc:	bf00      	nop
 80032ce:	371c      	adds	r7, #28
 80032d0:	46bd      	mov	sp, r7
 80032d2:	bc80      	pop	{r7}
 80032d4:	4770      	bx	lr
 80032d6:	bf00      	nop
 80032d8:	40012c00 	.word	0x40012c00

080032dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032dc:	b480      	push	{r7}
 80032de:	b087      	sub	sp, #28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
 80032e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	6a1b      	ldr	r3, [r3, #32]
 80032ea:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a1b      	ldr	r3, [r3, #32]
 80032f0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	69db      	ldr	r3, [r3, #28]
 8003302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	021b      	lsls	r3, r3, #8
 800331a:	68fa      	ldr	r2, [r7, #12]
 800331c:	4313      	orrs	r3, r2
 800331e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003328:	683b      	ldr	r3, [r7, #0]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	031b      	lsls	r3, r3, #12
 800332e:	693a      	ldr	r2, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a0f      	ldr	r2, [pc, #60]	@ (8003374 <TIM_OC4_SetConfig+0x98>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d109      	bne.n	8003350 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800333c:	697b      	ldr	r3, [r7, #20]
 800333e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	019b      	lsls	r3, r3, #6
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	4313      	orrs	r3, r2
 800334e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	68fa      	ldr	r2, [r7, #12]
 800335a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	621a      	str	r2, [r3, #32]
}
 800336a:	bf00      	nop
 800336c:	371c      	adds	r7, #28
 800336e:	46bd      	mov	sp, r7
 8003370:	bc80      	pop	{r7}
 8003372:	4770      	bx	lr
 8003374:	40012c00 	.word	0x40012c00

08003378 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003378:	b480      	push	{r7}
 800337a:	b087      	sub	sp, #28
 800337c:	af00      	add	r7, sp, #0
 800337e:	60f8      	str	r0, [r7, #12]
 8003380:	60b9      	str	r1, [r7, #8]
 8003382:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 031f 	and.w	r3, r3, #31
 800338a:	2201      	movs	r2, #1
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1a      	ldr	r2, [r3, #32]
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	43db      	mvns	r3, r3
 800339a:	401a      	ands	r2, r3
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	6a1a      	ldr	r2, [r3, #32]
 80033a4:	68bb      	ldr	r3, [r7, #8]
 80033a6:	f003 031f 	and.w	r3, r3, #31
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	fa01 f303 	lsl.w	r3, r1, r3
 80033b0:	431a      	orrs	r2, r3
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	621a      	str	r2, [r3, #32]
}
 80033b6:	bf00      	nop
 80033b8:	371c      	adds	r7, #28
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bc80      	pop	{r7}
 80033be:	4770      	bx	lr

080033c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033c0:	b480      	push	{r7}
 80033c2:	b085      	sub	sp, #20
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
 80033c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e046      	b.n	8003466 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80033fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68fa      	ldr	r2, [r7, #12]
 8003406:	4313      	orrs	r3, r2
 8003408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68fa      	ldr	r2, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	4a16      	ldr	r2, [pc, #88]	@ (8003470 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003418:	4293      	cmp	r3, r2
 800341a:	d00e      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003424:	d009      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4a12      	ldr	r2, [pc, #72]	@ (8003474 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800342c:	4293      	cmp	r3, r2
 800342e:	d004      	beq.n	800343a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	4a10      	ldr	r2, [pc, #64]	@ (8003478 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003436:	4293      	cmp	r3, r2
 8003438:	d10c      	bne.n	8003454 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003440:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4313      	orrs	r3, r2
 800344a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	68ba      	ldr	r2, [r7, #8]
 8003452:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2200      	movs	r2, #0
 8003460:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003464:	2300      	movs	r3, #0
}
 8003466:	4618      	mov	r0, r3
 8003468:	3714      	adds	r7, #20
 800346a:	46bd      	mov	sp, r7
 800346c:	bc80      	pop	{r7}
 800346e:	4770      	bx	lr
 8003470:	40012c00 	.word	0x40012c00
 8003474:	40000400 	.word	0x40000400
 8003478:	40000800 	.word	0x40000800

0800347c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
 8003484:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003486:	2300      	movs	r3, #0
 8003488:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003490:	2b01      	cmp	r3, #1
 8003492:	d101      	bne.n	8003498 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003494:	2302      	movs	r3, #2
 8003496:	e03d      	b.n	8003514 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2201      	movs	r2, #1
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	68db      	ldr	r3, [r3, #12]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	689b      	ldr	r3, [r3, #8]
 80034b8:	4313      	orrs	r3, r2
 80034ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	4313      	orrs	r3, r2
 80034c8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	695b      	ldr	r3, [r3, #20]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	4313      	orrs	r3, r2
 8003500:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68fa      	ldr	r2, [r7, #12]
 8003508:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003512:	2300      	movs	r3, #0
}
 8003514:	4618      	mov	r0, r3
 8003516:	3714      	adds	r7, #20
 8003518:	46bd      	mov	sp, r7
 800351a:	bc80      	pop	{r7}
 800351c:	4770      	bx	lr

0800351e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800351e:	b580      	push	{r7, lr}
 8003520:	b082      	sub	sp, #8
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d101      	bne.n	8003530 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800352c:	2301      	movs	r3, #1
 800352e:	e042      	b.n	80035b6 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003536:	b2db      	uxtb	r3, r3
 8003538:	2b00      	cmp	r3, #0
 800353a:	d106      	bne.n	800354a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f7fd fe4d 	bl	80011e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2224      	movs	r2, #36	@ 0x24
 800354e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003560:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f000 f972 	bl	800384c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	691a      	ldr	r2, [r3, #16]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003576:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	695a      	ldr	r2, [r3, #20]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003586:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	68da      	ldr	r2, [r3, #12]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003596:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2200      	movs	r2, #0
 800359c:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2220      	movs	r2, #32
 80035a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2220      	movs	r2, #32
 80035aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035be:	b580      	push	{r7, lr}
 80035c0:	b08a      	sub	sp, #40	@ 0x28
 80035c2:	af02      	add	r7, sp, #8
 80035c4:	60f8      	str	r0, [r7, #12]
 80035c6:	60b9      	str	r1, [r7, #8]
 80035c8:	603b      	str	r3, [r7, #0]
 80035ca:	4613      	mov	r3, r2
 80035cc:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	2b20      	cmp	r3, #32
 80035dc:	d175      	bne.n	80036ca <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_UART_Transmit+0x2c>
 80035e4:	88fb      	ldrh	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e06e      	b.n	80036cc <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	2200      	movs	r2, #0
 80035f2:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2221      	movs	r2, #33	@ 0x21
 80035f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035fc:	f7fd febc 	bl	8001378 <HAL_GetTick>
 8003600:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	88fa      	ldrh	r2, [r7, #6]
 8003606:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	88fa      	ldrh	r2, [r7, #6]
 800360c:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003616:	d108      	bne.n	800362a <HAL_UART_Transmit+0x6c>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	691b      	ldr	r3, [r3, #16]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d104      	bne.n	800362a <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003624:	68bb      	ldr	r3, [r7, #8]
 8003626:	61bb      	str	r3, [r7, #24]
 8003628:	e003      	b.n	8003632 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800362e:	2300      	movs	r3, #0
 8003630:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003632:	e02e      	b.n	8003692 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	9300      	str	r3, [sp, #0]
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2200      	movs	r2, #0
 800363c:	2180      	movs	r1, #128	@ 0x80
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f848 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d005      	beq.n	8003656 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2220      	movs	r2, #32
 800364e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e03a      	b.n	80036cc <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d10b      	bne.n	8003674 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800365c:	69bb      	ldr	r3, [r7, #24]
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800366a:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	3302      	adds	r3, #2
 8003670:	61bb      	str	r3, [r7, #24]
 8003672:	e007      	b.n	8003684 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	781a      	ldrb	r2, [r3, #0]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800367e:	69fb      	ldr	r3, [r7, #28]
 8003680:	3301      	adds	r3, #1
 8003682:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003696:	b29b      	uxth	r3, r3
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1cb      	bne.n	8003634 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	9300      	str	r3, [sp, #0]
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	2200      	movs	r2, #0
 80036a4:	2140      	movs	r1, #64	@ 0x40
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f814 	bl	80036d4 <UART_WaitOnFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	2220      	movs	r2, #32
 80036b6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80036ba:	2303      	movs	r3, #3
 80036bc:	e006      	b.n	80036cc <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	e000      	b.n	80036cc <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80036ca:	2302      	movs	r3, #2
  }
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	3720      	adds	r7, #32
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}

080036d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b086      	sub	sp, #24
 80036d8:	af00      	add	r7, sp, #0
 80036da:	60f8      	str	r0, [r7, #12]
 80036dc:	60b9      	str	r1, [r7, #8]
 80036de:	603b      	str	r3, [r7, #0]
 80036e0:	4613      	mov	r3, r2
 80036e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036e4:	e03b      	b.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036ec:	d037      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ee:	f7fd fe43 	bl	8001378 <HAL_GetTick>
 80036f2:	4602      	mov	r2, r0
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	6a3a      	ldr	r2, [r7, #32]
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d302      	bcc.n	8003704 <UART_WaitOnFlagUntilTimeout+0x30>
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d101      	bne.n	8003708 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	e03a      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68db      	ldr	r3, [r3, #12]
 800370e:	f003 0304 	and.w	r3, r3, #4
 8003712:	2b00      	cmp	r3, #0
 8003714:	d023      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	2b80      	cmp	r3, #128	@ 0x80
 800371a:	d020      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b40      	cmp	r3, #64	@ 0x40
 8003720:	d01d      	beq.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b08      	cmp	r3, #8
 800372e:	d116      	bne.n	800375e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003730:	2300      	movs	r3, #0
 8003732:	617b      	str	r3, [r7, #20]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	617b      	str	r3, [r7, #20]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	617b      	str	r3, [r7, #20]
 8003744:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003746:	68f8      	ldr	r0, [r7, #12]
 8003748:	f000 f81d 	bl	8003786 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2208      	movs	r2, #8
 8003750:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800375a:	2301      	movs	r3, #1
 800375c:	e00f      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	4013      	ands	r3, r2
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	429a      	cmp	r2, r3
 800376c:	bf0c      	ite	eq
 800376e:	2301      	moveq	r3, #1
 8003770:	2300      	movne	r3, #0
 8003772:	b2db      	uxtb	r3, r3
 8003774:	461a      	mov	r2, r3
 8003776:	79fb      	ldrb	r3, [r7, #7]
 8003778:	429a      	cmp	r2, r3
 800377a:	d0b4      	beq.n	80036e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800377c:	2300      	movs	r3, #0
}
 800377e:	4618      	mov	r0, r3
 8003780:	3718      	adds	r7, #24
 8003782:	46bd      	mov	sp, r7
 8003784:	bd80      	pop	{r7, pc}

08003786 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003786:	b480      	push	{r7}
 8003788:	b095      	sub	sp, #84	@ 0x54
 800378a:	af00      	add	r7, sp, #0
 800378c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	330c      	adds	r3, #12
 8003794:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003798:	e853 3f00 	ldrex	r3, [r3]
 800379c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800379e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	330c      	adds	r3, #12
 80037ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037ae:	643a      	str	r2, [r7, #64]	@ 0x40
 80037b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80037b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80037b6:	e841 2300 	strex	r3, r2, [r1]
 80037ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80037bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d1e5      	bne.n	800378e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3314      	adds	r3, #20
 80037c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	e853 3f00 	ldrex	r3, [r3]
 80037d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80037d2:	69fb      	ldr	r3, [r7, #28]
 80037d4:	f023 0301 	bic.w	r3, r3, #1
 80037d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	3314      	adds	r3, #20
 80037e0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80037e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80037e8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80037ea:	e841 2300 	strex	r3, r2, [r1]
 80037ee:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80037f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1e5      	bne.n	80037c2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d119      	bne.n	8003832 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	330c      	adds	r3, #12
 8003804:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	e853 3f00 	ldrex	r3, [r3]
 800380c:	60bb      	str	r3, [r7, #8]
   return(result);
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	f023 0310 	bic.w	r3, r3, #16
 8003814:	647b      	str	r3, [r7, #68]	@ 0x44
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	330c      	adds	r3, #12
 800381c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800381e:	61ba      	str	r2, [r7, #24]
 8003820:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003822:	6979      	ldr	r1, [r7, #20]
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	e841 2300 	strex	r3, r2, [r1]
 800382a:	613b      	str	r3, [r7, #16]
   return(result);
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1e5      	bne.n	80037fe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003840:	bf00      	nop
 8003842:	3754      	adds	r7, #84	@ 0x54
 8003844:	46bd      	mov	sp, r7
 8003846:	bc80      	pop	{r7}
 8003848:	4770      	bx	lr
	...

0800384c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	691b      	ldr	r3, [r3, #16]
 800385a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68da      	ldr	r2, [r3, #12]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	689a      	ldr	r2, [r3, #8]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	4313      	orrs	r3, r2
 800387a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003886:	f023 030c 	bic.w	r3, r3, #12
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	68b9      	ldr	r1, [r7, #8]
 8003890:	430b      	orrs	r3, r1
 8003892:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a2c      	ldr	r2, [pc, #176]	@ (8003960 <UART_SetConfig+0x114>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d103      	bne.n	80038bc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038b4:	f7ff f818 	bl	80028e8 <HAL_RCC_GetPCLK2Freq>
 80038b8:	60f8      	str	r0, [r7, #12]
 80038ba:	e002      	b.n	80038c2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038bc:	f7ff f800 	bl	80028c0 <HAL_RCC_GetPCLK1Freq>
 80038c0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038c2:	68fa      	ldr	r2, [r7, #12]
 80038c4:	4613      	mov	r3, r2
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	4413      	add	r3, r2
 80038ca:	009a      	lsls	r2, r3, #2
 80038cc:	441a      	add	r2, r3
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038d8:	4a22      	ldr	r2, [pc, #136]	@ (8003964 <UART_SetConfig+0x118>)
 80038da:	fba2 2303 	umull	r2, r3, r2, r3
 80038de:	095b      	lsrs	r3, r3, #5
 80038e0:	0119      	lsls	r1, r3, #4
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4613      	mov	r3, r2
 80038e6:	009b      	lsls	r3, r3, #2
 80038e8:	4413      	add	r3, r2
 80038ea:	009a      	lsls	r2, r3, #2
 80038ec:	441a      	add	r2, r3
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	685b      	ldr	r3, [r3, #4]
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80038f8:	4b1a      	ldr	r3, [pc, #104]	@ (8003964 <UART_SetConfig+0x118>)
 80038fa:	fba3 0302 	umull	r0, r3, r3, r2
 80038fe:	095b      	lsrs	r3, r3, #5
 8003900:	2064      	movs	r0, #100	@ 0x64
 8003902:	fb00 f303 	mul.w	r3, r0, r3
 8003906:	1ad3      	subs	r3, r2, r3
 8003908:	011b      	lsls	r3, r3, #4
 800390a:	3332      	adds	r3, #50	@ 0x32
 800390c:	4a15      	ldr	r2, [pc, #84]	@ (8003964 <UART_SetConfig+0x118>)
 800390e:	fba2 2303 	umull	r2, r3, r2, r3
 8003912:	095b      	lsrs	r3, r3, #5
 8003914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003918:	4419      	add	r1, r3
 800391a:	68fa      	ldr	r2, [r7, #12]
 800391c:	4613      	mov	r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	4413      	add	r3, r2
 8003922:	009a      	lsls	r2, r3, #2
 8003924:	441a      	add	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003930:	4b0c      	ldr	r3, [pc, #48]	@ (8003964 <UART_SetConfig+0x118>)
 8003932:	fba3 0302 	umull	r0, r3, r3, r2
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	2064      	movs	r0, #100	@ 0x64
 800393a:	fb00 f303 	mul.w	r3, r0, r3
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	3332      	adds	r3, #50	@ 0x32
 8003944:	4a07      	ldr	r2, [pc, #28]	@ (8003964 <UART_SetConfig+0x118>)
 8003946:	fba2 2303 	umull	r2, r3, r2, r3
 800394a:	095b      	lsrs	r3, r3, #5
 800394c:	f003 020f 	and.w	r2, r3, #15
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	440a      	add	r2, r1
 8003956:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	40013800 	.word	0x40013800
 8003964:	51eb851f 	.word	0x51eb851f

08003968 <siprintf>:
 8003968:	b40e      	push	{r1, r2, r3}
 800396a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800396e:	b500      	push	{lr}
 8003970:	b09c      	sub	sp, #112	@ 0x70
 8003972:	ab1d      	add	r3, sp, #116	@ 0x74
 8003974:	9002      	str	r0, [sp, #8]
 8003976:	9006      	str	r0, [sp, #24]
 8003978:	9107      	str	r1, [sp, #28]
 800397a:	9104      	str	r1, [sp, #16]
 800397c:	4808      	ldr	r0, [pc, #32]	@ (80039a0 <siprintf+0x38>)
 800397e:	4909      	ldr	r1, [pc, #36]	@ (80039a4 <siprintf+0x3c>)
 8003980:	f853 2b04 	ldr.w	r2, [r3], #4
 8003984:	9105      	str	r1, [sp, #20]
 8003986:	6800      	ldr	r0, [r0, #0]
 8003988:	a902      	add	r1, sp, #8
 800398a:	9301      	str	r3, [sp, #4]
 800398c:	f000 f89c 	bl	8003ac8 <_svfiprintf_r>
 8003990:	2200      	movs	r2, #0
 8003992:	9b02      	ldr	r3, [sp, #8]
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	b01c      	add	sp, #112	@ 0x70
 8003998:	f85d eb04 	ldr.w	lr, [sp], #4
 800399c:	b003      	add	sp, #12
 800399e:	4770      	bx	lr
 80039a0:	20000010 	.word	0x20000010
 80039a4:	ffff0208 	.word	0xffff0208

080039a8 <memset>:
 80039a8:	4603      	mov	r3, r0
 80039aa:	4402      	add	r2, r0
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d100      	bne.n	80039b2 <memset+0xa>
 80039b0:	4770      	bx	lr
 80039b2:	f803 1b01 	strb.w	r1, [r3], #1
 80039b6:	e7f9      	b.n	80039ac <memset+0x4>

080039b8 <__errno>:
 80039b8:	4b01      	ldr	r3, [pc, #4]	@ (80039c0 <__errno+0x8>)
 80039ba:	6818      	ldr	r0, [r3, #0]
 80039bc:	4770      	bx	lr
 80039be:	bf00      	nop
 80039c0:	20000010 	.word	0x20000010

080039c4 <__libc_init_array>:
 80039c4:	b570      	push	{r4, r5, r6, lr}
 80039c6:	2600      	movs	r6, #0
 80039c8:	4d0c      	ldr	r5, [pc, #48]	@ (80039fc <__libc_init_array+0x38>)
 80039ca:	4c0d      	ldr	r4, [pc, #52]	@ (8003a00 <__libc_init_array+0x3c>)
 80039cc:	1b64      	subs	r4, r4, r5
 80039ce:	10a4      	asrs	r4, r4, #2
 80039d0:	42a6      	cmp	r6, r4
 80039d2:	d109      	bne.n	80039e8 <__libc_init_array+0x24>
 80039d4:	f000 fc78 	bl	80042c8 <_init>
 80039d8:	2600      	movs	r6, #0
 80039da:	4d0a      	ldr	r5, [pc, #40]	@ (8003a04 <__libc_init_array+0x40>)
 80039dc:	4c0a      	ldr	r4, [pc, #40]	@ (8003a08 <__libc_init_array+0x44>)
 80039de:	1b64      	subs	r4, r4, r5
 80039e0:	10a4      	asrs	r4, r4, #2
 80039e2:	42a6      	cmp	r6, r4
 80039e4:	d105      	bne.n	80039f2 <__libc_init_array+0x2e>
 80039e6:	bd70      	pop	{r4, r5, r6, pc}
 80039e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ec:	4798      	blx	r3
 80039ee:	3601      	adds	r6, #1
 80039f0:	e7ee      	b.n	80039d0 <__libc_init_array+0xc>
 80039f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80039f6:	4798      	blx	r3
 80039f8:	3601      	adds	r6, #1
 80039fa:	e7f2      	b.n	80039e2 <__libc_init_array+0x1e>
 80039fc:	08004388 	.word	0x08004388
 8003a00:	08004388 	.word	0x08004388
 8003a04:	08004388 	.word	0x08004388
 8003a08:	0800438c 	.word	0x0800438c

08003a0c <__retarget_lock_acquire_recursive>:
 8003a0c:	4770      	bx	lr

08003a0e <__retarget_lock_release_recursive>:
 8003a0e:	4770      	bx	lr

08003a10 <__ssputs_r>:
 8003a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a14:	461f      	mov	r7, r3
 8003a16:	688e      	ldr	r6, [r1, #8]
 8003a18:	4682      	mov	sl, r0
 8003a1a:	42be      	cmp	r6, r7
 8003a1c:	460c      	mov	r4, r1
 8003a1e:	4690      	mov	r8, r2
 8003a20:	680b      	ldr	r3, [r1, #0]
 8003a22:	d82d      	bhi.n	8003a80 <__ssputs_r+0x70>
 8003a24:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003a28:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8003a2c:	d026      	beq.n	8003a7c <__ssputs_r+0x6c>
 8003a2e:	6965      	ldr	r5, [r4, #20]
 8003a30:	6909      	ldr	r1, [r1, #16]
 8003a32:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003a36:	eba3 0901 	sub.w	r9, r3, r1
 8003a3a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003a3e:	1c7b      	adds	r3, r7, #1
 8003a40:	444b      	add	r3, r9
 8003a42:	106d      	asrs	r5, r5, #1
 8003a44:	429d      	cmp	r5, r3
 8003a46:	bf38      	it	cc
 8003a48:	461d      	movcc	r5, r3
 8003a4a:	0553      	lsls	r3, r2, #21
 8003a4c:	d527      	bpl.n	8003a9e <__ssputs_r+0x8e>
 8003a4e:	4629      	mov	r1, r5
 8003a50:	f000 f958 	bl	8003d04 <_malloc_r>
 8003a54:	4606      	mov	r6, r0
 8003a56:	b360      	cbz	r0, 8003ab2 <__ssputs_r+0xa2>
 8003a58:	464a      	mov	r2, r9
 8003a5a:	6921      	ldr	r1, [r4, #16]
 8003a5c:	f000 fbd6 	bl	800420c <memcpy>
 8003a60:	89a3      	ldrh	r3, [r4, #12]
 8003a62:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8003a66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a6a:	81a3      	strh	r3, [r4, #12]
 8003a6c:	6126      	str	r6, [r4, #16]
 8003a6e:	444e      	add	r6, r9
 8003a70:	6026      	str	r6, [r4, #0]
 8003a72:	463e      	mov	r6, r7
 8003a74:	6165      	str	r5, [r4, #20]
 8003a76:	eba5 0509 	sub.w	r5, r5, r9
 8003a7a:	60a5      	str	r5, [r4, #8]
 8003a7c:	42be      	cmp	r6, r7
 8003a7e:	d900      	bls.n	8003a82 <__ssputs_r+0x72>
 8003a80:	463e      	mov	r6, r7
 8003a82:	4632      	mov	r2, r6
 8003a84:	4641      	mov	r1, r8
 8003a86:	6820      	ldr	r0, [r4, #0]
 8003a88:	f000 fb88 	bl	800419c <memmove>
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	68a3      	ldr	r3, [r4, #8]
 8003a90:	1b9b      	subs	r3, r3, r6
 8003a92:	60a3      	str	r3, [r4, #8]
 8003a94:	6823      	ldr	r3, [r4, #0]
 8003a96:	4433      	add	r3, r6
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003a9e:	462a      	mov	r2, r5
 8003aa0:	f000 fb4e 	bl	8004140 <_realloc_r>
 8003aa4:	4606      	mov	r6, r0
 8003aa6:	2800      	cmp	r0, #0
 8003aa8:	d1e0      	bne.n	8003a6c <__ssputs_r+0x5c>
 8003aaa:	4650      	mov	r0, sl
 8003aac:	6921      	ldr	r1, [r4, #16]
 8003aae:	f000 fbbb 	bl	8004228 <_free_r>
 8003ab2:	230c      	movs	r3, #12
 8003ab4:	f8ca 3000 	str.w	r3, [sl]
 8003ab8:	89a3      	ldrh	r3, [r4, #12]
 8003aba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003abe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	e7e9      	b.n	8003a9a <__ssputs_r+0x8a>
	...

08003ac8 <_svfiprintf_r>:
 8003ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003acc:	4698      	mov	r8, r3
 8003ace:	898b      	ldrh	r3, [r1, #12]
 8003ad0:	4607      	mov	r7, r0
 8003ad2:	061b      	lsls	r3, r3, #24
 8003ad4:	460d      	mov	r5, r1
 8003ad6:	4614      	mov	r4, r2
 8003ad8:	b09d      	sub	sp, #116	@ 0x74
 8003ada:	d510      	bpl.n	8003afe <_svfiprintf_r+0x36>
 8003adc:	690b      	ldr	r3, [r1, #16]
 8003ade:	b973      	cbnz	r3, 8003afe <_svfiprintf_r+0x36>
 8003ae0:	2140      	movs	r1, #64	@ 0x40
 8003ae2:	f000 f90f 	bl	8003d04 <_malloc_r>
 8003ae6:	6028      	str	r0, [r5, #0]
 8003ae8:	6128      	str	r0, [r5, #16]
 8003aea:	b930      	cbnz	r0, 8003afa <_svfiprintf_r+0x32>
 8003aec:	230c      	movs	r3, #12
 8003aee:	603b      	str	r3, [r7, #0]
 8003af0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003af4:	b01d      	add	sp, #116	@ 0x74
 8003af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003afa:	2340      	movs	r3, #64	@ 0x40
 8003afc:	616b      	str	r3, [r5, #20]
 8003afe:	2300      	movs	r3, #0
 8003b00:	9309      	str	r3, [sp, #36]	@ 0x24
 8003b02:	2320      	movs	r3, #32
 8003b04:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003b08:	2330      	movs	r3, #48	@ 0x30
 8003b0a:	f04f 0901 	mov.w	r9, #1
 8003b0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8003b12:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8003cac <_svfiprintf_r+0x1e4>
 8003b16:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003b1a:	4623      	mov	r3, r4
 8003b1c:	469a      	mov	sl, r3
 8003b1e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003b22:	b10a      	cbz	r2, 8003b28 <_svfiprintf_r+0x60>
 8003b24:	2a25      	cmp	r2, #37	@ 0x25
 8003b26:	d1f9      	bne.n	8003b1c <_svfiprintf_r+0x54>
 8003b28:	ebba 0b04 	subs.w	fp, sl, r4
 8003b2c:	d00b      	beq.n	8003b46 <_svfiprintf_r+0x7e>
 8003b2e:	465b      	mov	r3, fp
 8003b30:	4622      	mov	r2, r4
 8003b32:	4629      	mov	r1, r5
 8003b34:	4638      	mov	r0, r7
 8003b36:	f7ff ff6b 	bl	8003a10 <__ssputs_r>
 8003b3a:	3001      	adds	r0, #1
 8003b3c:	f000 80a7 	beq.w	8003c8e <_svfiprintf_r+0x1c6>
 8003b40:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003b42:	445a      	add	r2, fp
 8003b44:	9209      	str	r2, [sp, #36]	@ 0x24
 8003b46:	f89a 3000 	ldrb.w	r3, [sl]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	f000 809f 	beq.w	8003c8e <_svfiprintf_r+0x1c6>
 8003b50:	2300      	movs	r3, #0
 8003b52:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003b56:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003b5a:	f10a 0a01 	add.w	sl, sl, #1
 8003b5e:	9304      	str	r3, [sp, #16]
 8003b60:	9307      	str	r3, [sp, #28]
 8003b62:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003b66:	931a      	str	r3, [sp, #104]	@ 0x68
 8003b68:	4654      	mov	r4, sl
 8003b6a:	2205      	movs	r2, #5
 8003b6c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b70:	484e      	ldr	r0, [pc, #312]	@ (8003cac <_svfiprintf_r+0x1e4>)
 8003b72:	f000 fb3d 	bl	80041f0 <memchr>
 8003b76:	9a04      	ldr	r2, [sp, #16]
 8003b78:	b9d8      	cbnz	r0, 8003bb2 <_svfiprintf_r+0xea>
 8003b7a:	06d0      	lsls	r0, r2, #27
 8003b7c:	bf44      	itt	mi
 8003b7e:	2320      	movmi	r3, #32
 8003b80:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b84:	0711      	lsls	r1, r2, #28
 8003b86:	bf44      	itt	mi
 8003b88:	232b      	movmi	r3, #43	@ 0x2b
 8003b8a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003b8e:	f89a 3000 	ldrb.w	r3, [sl]
 8003b92:	2b2a      	cmp	r3, #42	@ 0x2a
 8003b94:	d015      	beq.n	8003bc2 <_svfiprintf_r+0xfa>
 8003b96:	4654      	mov	r4, sl
 8003b98:	2000      	movs	r0, #0
 8003b9a:	f04f 0c0a 	mov.w	ip, #10
 8003b9e:	9a07      	ldr	r2, [sp, #28]
 8003ba0:	4621      	mov	r1, r4
 8003ba2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003ba6:	3b30      	subs	r3, #48	@ 0x30
 8003ba8:	2b09      	cmp	r3, #9
 8003baa:	d94b      	bls.n	8003c44 <_svfiprintf_r+0x17c>
 8003bac:	b1b0      	cbz	r0, 8003bdc <_svfiprintf_r+0x114>
 8003bae:	9207      	str	r2, [sp, #28]
 8003bb0:	e014      	b.n	8003bdc <_svfiprintf_r+0x114>
 8003bb2:	eba0 0308 	sub.w	r3, r0, r8
 8003bb6:	fa09 f303 	lsl.w	r3, r9, r3
 8003bba:	4313      	orrs	r3, r2
 8003bbc:	46a2      	mov	sl, r4
 8003bbe:	9304      	str	r3, [sp, #16]
 8003bc0:	e7d2      	b.n	8003b68 <_svfiprintf_r+0xa0>
 8003bc2:	9b03      	ldr	r3, [sp, #12]
 8003bc4:	1d19      	adds	r1, r3, #4
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	9103      	str	r1, [sp, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	bfbb      	ittet	lt
 8003bce:	425b      	neglt	r3, r3
 8003bd0:	f042 0202 	orrlt.w	r2, r2, #2
 8003bd4:	9307      	strge	r3, [sp, #28]
 8003bd6:	9307      	strlt	r3, [sp, #28]
 8003bd8:	bfb8      	it	lt
 8003bda:	9204      	strlt	r2, [sp, #16]
 8003bdc:	7823      	ldrb	r3, [r4, #0]
 8003bde:	2b2e      	cmp	r3, #46	@ 0x2e
 8003be0:	d10a      	bne.n	8003bf8 <_svfiprintf_r+0x130>
 8003be2:	7863      	ldrb	r3, [r4, #1]
 8003be4:	2b2a      	cmp	r3, #42	@ 0x2a
 8003be6:	d132      	bne.n	8003c4e <_svfiprintf_r+0x186>
 8003be8:	9b03      	ldr	r3, [sp, #12]
 8003bea:	3402      	adds	r4, #2
 8003bec:	1d1a      	adds	r2, r3, #4
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	9203      	str	r2, [sp, #12]
 8003bf2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003bf6:	9305      	str	r3, [sp, #20]
 8003bf8:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8003cb0 <_svfiprintf_r+0x1e8>
 8003bfc:	2203      	movs	r2, #3
 8003bfe:	4650      	mov	r0, sl
 8003c00:	7821      	ldrb	r1, [r4, #0]
 8003c02:	f000 faf5 	bl	80041f0 <memchr>
 8003c06:	b138      	cbz	r0, 8003c18 <_svfiprintf_r+0x150>
 8003c08:	2240      	movs	r2, #64	@ 0x40
 8003c0a:	9b04      	ldr	r3, [sp, #16]
 8003c0c:	eba0 000a 	sub.w	r0, r0, sl
 8003c10:	4082      	lsls	r2, r0
 8003c12:	4313      	orrs	r3, r2
 8003c14:	3401      	adds	r4, #1
 8003c16:	9304      	str	r3, [sp, #16]
 8003c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003c1c:	2206      	movs	r2, #6
 8003c1e:	4825      	ldr	r0, [pc, #148]	@ (8003cb4 <_svfiprintf_r+0x1ec>)
 8003c20:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003c24:	f000 fae4 	bl	80041f0 <memchr>
 8003c28:	2800      	cmp	r0, #0
 8003c2a:	d036      	beq.n	8003c9a <_svfiprintf_r+0x1d2>
 8003c2c:	4b22      	ldr	r3, [pc, #136]	@ (8003cb8 <_svfiprintf_r+0x1f0>)
 8003c2e:	bb1b      	cbnz	r3, 8003c78 <_svfiprintf_r+0x1b0>
 8003c30:	9b03      	ldr	r3, [sp, #12]
 8003c32:	3307      	adds	r3, #7
 8003c34:	f023 0307 	bic.w	r3, r3, #7
 8003c38:	3308      	adds	r3, #8
 8003c3a:	9303      	str	r3, [sp, #12]
 8003c3c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c3e:	4433      	add	r3, r6
 8003c40:	9309      	str	r3, [sp, #36]	@ 0x24
 8003c42:	e76a      	b.n	8003b1a <_svfiprintf_r+0x52>
 8003c44:	460c      	mov	r4, r1
 8003c46:	2001      	movs	r0, #1
 8003c48:	fb0c 3202 	mla	r2, ip, r2, r3
 8003c4c:	e7a8      	b.n	8003ba0 <_svfiprintf_r+0xd8>
 8003c4e:	2300      	movs	r3, #0
 8003c50:	f04f 0c0a 	mov.w	ip, #10
 8003c54:	4619      	mov	r1, r3
 8003c56:	3401      	adds	r4, #1
 8003c58:	9305      	str	r3, [sp, #20]
 8003c5a:	4620      	mov	r0, r4
 8003c5c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003c60:	3a30      	subs	r2, #48	@ 0x30
 8003c62:	2a09      	cmp	r2, #9
 8003c64:	d903      	bls.n	8003c6e <_svfiprintf_r+0x1a6>
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d0c6      	beq.n	8003bf8 <_svfiprintf_r+0x130>
 8003c6a:	9105      	str	r1, [sp, #20]
 8003c6c:	e7c4      	b.n	8003bf8 <_svfiprintf_r+0x130>
 8003c6e:	4604      	mov	r4, r0
 8003c70:	2301      	movs	r3, #1
 8003c72:	fb0c 2101 	mla	r1, ip, r1, r2
 8003c76:	e7f0      	b.n	8003c5a <_svfiprintf_r+0x192>
 8003c78:	ab03      	add	r3, sp, #12
 8003c7a:	9300      	str	r3, [sp, #0]
 8003c7c:	462a      	mov	r2, r5
 8003c7e:	4638      	mov	r0, r7
 8003c80:	4b0e      	ldr	r3, [pc, #56]	@ (8003cbc <_svfiprintf_r+0x1f4>)
 8003c82:	a904      	add	r1, sp, #16
 8003c84:	f3af 8000 	nop.w
 8003c88:	1c42      	adds	r2, r0, #1
 8003c8a:	4606      	mov	r6, r0
 8003c8c:	d1d6      	bne.n	8003c3c <_svfiprintf_r+0x174>
 8003c8e:	89ab      	ldrh	r3, [r5, #12]
 8003c90:	065b      	lsls	r3, r3, #25
 8003c92:	f53f af2d 	bmi.w	8003af0 <_svfiprintf_r+0x28>
 8003c96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003c98:	e72c      	b.n	8003af4 <_svfiprintf_r+0x2c>
 8003c9a:	ab03      	add	r3, sp, #12
 8003c9c:	9300      	str	r3, [sp, #0]
 8003c9e:	462a      	mov	r2, r5
 8003ca0:	4638      	mov	r0, r7
 8003ca2:	4b06      	ldr	r3, [pc, #24]	@ (8003cbc <_svfiprintf_r+0x1f4>)
 8003ca4:	a904      	add	r1, sp, #16
 8003ca6:	f000 f91f 	bl	8003ee8 <_printf_i>
 8003caa:	e7ed      	b.n	8003c88 <_svfiprintf_r+0x1c0>
 8003cac:	0800434a 	.word	0x0800434a
 8003cb0:	08004350 	.word	0x08004350
 8003cb4:	08004354 	.word	0x08004354
 8003cb8:	00000000 	.word	0x00000000
 8003cbc:	08003a11 	.word	0x08003a11

08003cc0 <sbrk_aligned>:
 8003cc0:	b570      	push	{r4, r5, r6, lr}
 8003cc2:	4e0f      	ldr	r6, [pc, #60]	@ (8003d00 <sbrk_aligned+0x40>)
 8003cc4:	460c      	mov	r4, r1
 8003cc6:	6831      	ldr	r1, [r6, #0]
 8003cc8:	4605      	mov	r5, r0
 8003cca:	b911      	cbnz	r1, 8003cd2 <sbrk_aligned+0x12>
 8003ccc:	f000 fa80 	bl	80041d0 <_sbrk_r>
 8003cd0:	6030      	str	r0, [r6, #0]
 8003cd2:	4621      	mov	r1, r4
 8003cd4:	4628      	mov	r0, r5
 8003cd6:	f000 fa7b 	bl	80041d0 <_sbrk_r>
 8003cda:	1c43      	adds	r3, r0, #1
 8003cdc:	d103      	bne.n	8003ce6 <sbrk_aligned+0x26>
 8003cde:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003ce2:	4620      	mov	r0, r4
 8003ce4:	bd70      	pop	{r4, r5, r6, pc}
 8003ce6:	1cc4      	adds	r4, r0, #3
 8003ce8:	f024 0403 	bic.w	r4, r4, #3
 8003cec:	42a0      	cmp	r0, r4
 8003cee:	d0f8      	beq.n	8003ce2 <sbrk_aligned+0x22>
 8003cf0:	1a21      	subs	r1, r4, r0
 8003cf2:	4628      	mov	r0, r5
 8003cf4:	f000 fa6c 	bl	80041d0 <_sbrk_r>
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	d1f2      	bne.n	8003ce2 <sbrk_aligned+0x22>
 8003cfc:	e7ef      	b.n	8003cde <sbrk_aligned+0x1e>
 8003cfe:	bf00      	nop
 8003d00:	20000290 	.word	0x20000290

08003d04 <_malloc_r>:
 8003d04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d08:	1ccd      	adds	r5, r1, #3
 8003d0a:	f025 0503 	bic.w	r5, r5, #3
 8003d0e:	3508      	adds	r5, #8
 8003d10:	2d0c      	cmp	r5, #12
 8003d12:	bf38      	it	cc
 8003d14:	250c      	movcc	r5, #12
 8003d16:	2d00      	cmp	r5, #0
 8003d18:	4606      	mov	r6, r0
 8003d1a:	db01      	blt.n	8003d20 <_malloc_r+0x1c>
 8003d1c:	42a9      	cmp	r1, r5
 8003d1e:	d904      	bls.n	8003d2a <_malloc_r+0x26>
 8003d20:	230c      	movs	r3, #12
 8003d22:	6033      	str	r3, [r6, #0]
 8003d24:	2000      	movs	r0, #0
 8003d26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d2a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003e00 <_malloc_r+0xfc>
 8003d2e:	f000 f9fb 	bl	8004128 <__malloc_lock>
 8003d32:	f8d8 3000 	ldr.w	r3, [r8]
 8003d36:	461c      	mov	r4, r3
 8003d38:	bb44      	cbnz	r4, 8003d8c <_malloc_r+0x88>
 8003d3a:	4629      	mov	r1, r5
 8003d3c:	4630      	mov	r0, r6
 8003d3e:	f7ff ffbf 	bl	8003cc0 <sbrk_aligned>
 8003d42:	1c43      	adds	r3, r0, #1
 8003d44:	4604      	mov	r4, r0
 8003d46:	d158      	bne.n	8003dfa <_malloc_r+0xf6>
 8003d48:	f8d8 4000 	ldr.w	r4, [r8]
 8003d4c:	4627      	mov	r7, r4
 8003d4e:	2f00      	cmp	r7, #0
 8003d50:	d143      	bne.n	8003dda <_malloc_r+0xd6>
 8003d52:	2c00      	cmp	r4, #0
 8003d54:	d04b      	beq.n	8003dee <_malloc_r+0xea>
 8003d56:	6823      	ldr	r3, [r4, #0]
 8003d58:	4639      	mov	r1, r7
 8003d5a:	4630      	mov	r0, r6
 8003d5c:	eb04 0903 	add.w	r9, r4, r3
 8003d60:	f000 fa36 	bl	80041d0 <_sbrk_r>
 8003d64:	4581      	cmp	r9, r0
 8003d66:	d142      	bne.n	8003dee <_malloc_r+0xea>
 8003d68:	6821      	ldr	r1, [r4, #0]
 8003d6a:	4630      	mov	r0, r6
 8003d6c:	1a6d      	subs	r5, r5, r1
 8003d6e:	4629      	mov	r1, r5
 8003d70:	f7ff ffa6 	bl	8003cc0 <sbrk_aligned>
 8003d74:	3001      	adds	r0, #1
 8003d76:	d03a      	beq.n	8003dee <_malloc_r+0xea>
 8003d78:	6823      	ldr	r3, [r4, #0]
 8003d7a:	442b      	add	r3, r5
 8003d7c:	6023      	str	r3, [r4, #0]
 8003d7e:	f8d8 3000 	ldr.w	r3, [r8]
 8003d82:	685a      	ldr	r2, [r3, #4]
 8003d84:	bb62      	cbnz	r2, 8003de0 <_malloc_r+0xdc>
 8003d86:	f8c8 7000 	str.w	r7, [r8]
 8003d8a:	e00f      	b.n	8003dac <_malloc_r+0xa8>
 8003d8c:	6822      	ldr	r2, [r4, #0]
 8003d8e:	1b52      	subs	r2, r2, r5
 8003d90:	d420      	bmi.n	8003dd4 <_malloc_r+0xd0>
 8003d92:	2a0b      	cmp	r2, #11
 8003d94:	d917      	bls.n	8003dc6 <_malloc_r+0xc2>
 8003d96:	1961      	adds	r1, r4, r5
 8003d98:	42a3      	cmp	r3, r4
 8003d9a:	6025      	str	r5, [r4, #0]
 8003d9c:	bf18      	it	ne
 8003d9e:	6059      	strne	r1, [r3, #4]
 8003da0:	6863      	ldr	r3, [r4, #4]
 8003da2:	bf08      	it	eq
 8003da4:	f8c8 1000 	streq.w	r1, [r8]
 8003da8:	5162      	str	r2, [r4, r5]
 8003daa:	604b      	str	r3, [r1, #4]
 8003dac:	4630      	mov	r0, r6
 8003dae:	f000 f9c1 	bl	8004134 <__malloc_unlock>
 8003db2:	f104 000b 	add.w	r0, r4, #11
 8003db6:	1d23      	adds	r3, r4, #4
 8003db8:	f020 0007 	bic.w	r0, r0, #7
 8003dbc:	1ac2      	subs	r2, r0, r3
 8003dbe:	bf1c      	itt	ne
 8003dc0:	1a1b      	subne	r3, r3, r0
 8003dc2:	50a3      	strne	r3, [r4, r2]
 8003dc4:	e7af      	b.n	8003d26 <_malloc_r+0x22>
 8003dc6:	6862      	ldr	r2, [r4, #4]
 8003dc8:	42a3      	cmp	r3, r4
 8003dca:	bf0c      	ite	eq
 8003dcc:	f8c8 2000 	streq.w	r2, [r8]
 8003dd0:	605a      	strne	r2, [r3, #4]
 8003dd2:	e7eb      	b.n	8003dac <_malloc_r+0xa8>
 8003dd4:	4623      	mov	r3, r4
 8003dd6:	6864      	ldr	r4, [r4, #4]
 8003dd8:	e7ae      	b.n	8003d38 <_malloc_r+0x34>
 8003dda:	463c      	mov	r4, r7
 8003ddc:	687f      	ldr	r7, [r7, #4]
 8003dde:	e7b6      	b.n	8003d4e <_malloc_r+0x4a>
 8003de0:	461a      	mov	r2, r3
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	42a3      	cmp	r3, r4
 8003de6:	d1fb      	bne.n	8003de0 <_malloc_r+0xdc>
 8003de8:	2300      	movs	r3, #0
 8003dea:	6053      	str	r3, [r2, #4]
 8003dec:	e7de      	b.n	8003dac <_malloc_r+0xa8>
 8003dee:	230c      	movs	r3, #12
 8003df0:	4630      	mov	r0, r6
 8003df2:	6033      	str	r3, [r6, #0]
 8003df4:	f000 f99e 	bl	8004134 <__malloc_unlock>
 8003df8:	e794      	b.n	8003d24 <_malloc_r+0x20>
 8003dfa:	6005      	str	r5, [r0, #0]
 8003dfc:	e7d6      	b.n	8003dac <_malloc_r+0xa8>
 8003dfe:	bf00      	nop
 8003e00:	20000294 	.word	0x20000294

08003e04 <_printf_common>:
 8003e04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003e08:	4616      	mov	r6, r2
 8003e0a:	4698      	mov	r8, r3
 8003e0c:	688a      	ldr	r2, [r1, #8]
 8003e0e:	690b      	ldr	r3, [r1, #16]
 8003e10:	4607      	mov	r7, r0
 8003e12:	4293      	cmp	r3, r2
 8003e14:	bfb8      	it	lt
 8003e16:	4613      	movlt	r3, r2
 8003e18:	6033      	str	r3, [r6, #0]
 8003e1a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e1e:	460c      	mov	r4, r1
 8003e20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e24:	b10a      	cbz	r2, 8003e2a <_printf_common+0x26>
 8003e26:	3301      	adds	r3, #1
 8003e28:	6033      	str	r3, [r6, #0]
 8003e2a:	6823      	ldr	r3, [r4, #0]
 8003e2c:	0699      	lsls	r1, r3, #26
 8003e2e:	bf42      	ittt	mi
 8003e30:	6833      	ldrmi	r3, [r6, #0]
 8003e32:	3302      	addmi	r3, #2
 8003e34:	6033      	strmi	r3, [r6, #0]
 8003e36:	6825      	ldr	r5, [r4, #0]
 8003e38:	f015 0506 	ands.w	r5, r5, #6
 8003e3c:	d106      	bne.n	8003e4c <_printf_common+0x48>
 8003e3e:	f104 0a19 	add.w	sl, r4, #25
 8003e42:	68e3      	ldr	r3, [r4, #12]
 8003e44:	6832      	ldr	r2, [r6, #0]
 8003e46:	1a9b      	subs	r3, r3, r2
 8003e48:	42ab      	cmp	r3, r5
 8003e4a:	dc2b      	bgt.n	8003ea4 <_printf_common+0xa0>
 8003e4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e50:	6822      	ldr	r2, [r4, #0]
 8003e52:	3b00      	subs	r3, #0
 8003e54:	bf18      	it	ne
 8003e56:	2301      	movne	r3, #1
 8003e58:	0692      	lsls	r2, r2, #26
 8003e5a:	d430      	bmi.n	8003ebe <_printf_common+0xba>
 8003e5c:	4641      	mov	r1, r8
 8003e5e:	4638      	mov	r0, r7
 8003e60:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e64:	47c8      	blx	r9
 8003e66:	3001      	adds	r0, #1
 8003e68:	d023      	beq.n	8003eb2 <_printf_common+0xae>
 8003e6a:	6823      	ldr	r3, [r4, #0]
 8003e6c:	6922      	ldr	r2, [r4, #16]
 8003e6e:	f003 0306 	and.w	r3, r3, #6
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	bf14      	ite	ne
 8003e76:	2500      	movne	r5, #0
 8003e78:	6833      	ldreq	r3, [r6, #0]
 8003e7a:	f04f 0600 	mov.w	r6, #0
 8003e7e:	bf08      	it	eq
 8003e80:	68e5      	ldreq	r5, [r4, #12]
 8003e82:	f104 041a 	add.w	r4, r4, #26
 8003e86:	bf08      	it	eq
 8003e88:	1aed      	subeq	r5, r5, r3
 8003e8a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8003e8e:	bf08      	it	eq
 8003e90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e94:	4293      	cmp	r3, r2
 8003e96:	bfc4      	itt	gt
 8003e98:	1a9b      	subgt	r3, r3, r2
 8003e9a:	18ed      	addgt	r5, r5, r3
 8003e9c:	42b5      	cmp	r5, r6
 8003e9e:	d11a      	bne.n	8003ed6 <_printf_common+0xd2>
 8003ea0:	2000      	movs	r0, #0
 8003ea2:	e008      	b.n	8003eb6 <_printf_common+0xb2>
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	4652      	mov	r2, sl
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	4638      	mov	r0, r7
 8003eac:	47c8      	blx	r9
 8003eae:	3001      	adds	r0, #1
 8003eb0:	d103      	bne.n	8003eba <_printf_common+0xb6>
 8003eb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003eb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003eba:	3501      	adds	r5, #1
 8003ebc:	e7c1      	b.n	8003e42 <_printf_common+0x3e>
 8003ebe:	2030      	movs	r0, #48	@ 0x30
 8003ec0:	18e1      	adds	r1, r4, r3
 8003ec2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003ecc:	4422      	add	r2, r4
 8003ece:	3302      	adds	r3, #2
 8003ed0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ed4:	e7c2      	b.n	8003e5c <_printf_common+0x58>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	4622      	mov	r2, r4
 8003eda:	4641      	mov	r1, r8
 8003edc:	4638      	mov	r0, r7
 8003ede:	47c8      	blx	r9
 8003ee0:	3001      	adds	r0, #1
 8003ee2:	d0e6      	beq.n	8003eb2 <_printf_common+0xae>
 8003ee4:	3601      	adds	r6, #1
 8003ee6:	e7d9      	b.n	8003e9c <_printf_common+0x98>

08003ee8 <_printf_i>:
 8003ee8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003eec:	7e0f      	ldrb	r7, [r1, #24]
 8003eee:	4691      	mov	r9, r2
 8003ef0:	2f78      	cmp	r7, #120	@ 0x78
 8003ef2:	4680      	mov	r8, r0
 8003ef4:	460c      	mov	r4, r1
 8003ef6:	469a      	mov	sl, r3
 8003ef8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003efa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003efe:	d807      	bhi.n	8003f10 <_printf_i+0x28>
 8003f00:	2f62      	cmp	r7, #98	@ 0x62
 8003f02:	d80a      	bhi.n	8003f1a <_printf_i+0x32>
 8003f04:	2f00      	cmp	r7, #0
 8003f06:	f000 80d3 	beq.w	80040b0 <_printf_i+0x1c8>
 8003f0a:	2f58      	cmp	r7, #88	@ 0x58
 8003f0c:	f000 80ba 	beq.w	8004084 <_printf_i+0x19c>
 8003f10:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f14:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f18:	e03a      	b.n	8003f90 <_printf_i+0xa8>
 8003f1a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f1e:	2b15      	cmp	r3, #21
 8003f20:	d8f6      	bhi.n	8003f10 <_printf_i+0x28>
 8003f22:	a101      	add	r1, pc, #4	@ (adr r1, 8003f28 <_printf_i+0x40>)
 8003f24:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f28:	08003f81 	.word	0x08003f81
 8003f2c:	08003f95 	.word	0x08003f95
 8003f30:	08003f11 	.word	0x08003f11
 8003f34:	08003f11 	.word	0x08003f11
 8003f38:	08003f11 	.word	0x08003f11
 8003f3c:	08003f11 	.word	0x08003f11
 8003f40:	08003f95 	.word	0x08003f95
 8003f44:	08003f11 	.word	0x08003f11
 8003f48:	08003f11 	.word	0x08003f11
 8003f4c:	08003f11 	.word	0x08003f11
 8003f50:	08003f11 	.word	0x08003f11
 8003f54:	08004097 	.word	0x08004097
 8003f58:	08003fbf 	.word	0x08003fbf
 8003f5c:	08004051 	.word	0x08004051
 8003f60:	08003f11 	.word	0x08003f11
 8003f64:	08003f11 	.word	0x08003f11
 8003f68:	080040b9 	.word	0x080040b9
 8003f6c:	08003f11 	.word	0x08003f11
 8003f70:	08003fbf 	.word	0x08003fbf
 8003f74:	08003f11 	.word	0x08003f11
 8003f78:	08003f11 	.word	0x08003f11
 8003f7c:	08004059 	.word	0x08004059
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	1d1a      	adds	r2, r3, #4
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	6032      	str	r2, [r6, #0]
 8003f88:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f8c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f90:	2301      	movs	r3, #1
 8003f92:	e09e      	b.n	80040d2 <_printf_i+0x1ea>
 8003f94:	6833      	ldr	r3, [r6, #0]
 8003f96:	6820      	ldr	r0, [r4, #0]
 8003f98:	1d19      	adds	r1, r3, #4
 8003f9a:	6031      	str	r1, [r6, #0]
 8003f9c:	0606      	lsls	r6, r0, #24
 8003f9e:	d501      	bpl.n	8003fa4 <_printf_i+0xbc>
 8003fa0:	681d      	ldr	r5, [r3, #0]
 8003fa2:	e003      	b.n	8003fac <_printf_i+0xc4>
 8003fa4:	0645      	lsls	r5, r0, #25
 8003fa6:	d5fb      	bpl.n	8003fa0 <_printf_i+0xb8>
 8003fa8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003fac:	2d00      	cmp	r5, #0
 8003fae:	da03      	bge.n	8003fb8 <_printf_i+0xd0>
 8003fb0:	232d      	movs	r3, #45	@ 0x2d
 8003fb2:	426d      	negs	r5, r5
 8003fb4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fb8:	230a      	movs	r3, #10
 8003fba:	4859      	ldr	r0, [pc, #356]	@ (8004120 <_printf_i+0x238>)
 8003fbc:	e011      	b.n	8003fe2 <_printf_i+0xfa>
 8003fbe:	6821      	ldr	r1, [r4, #0]
 8003fc0:	6833      	ldr	r3, [r6, #0]
 8003fc2:	0608      	lsls	r0, r1, #24
 8003fc4:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fc8:	d402      	bmi.n	8003fd0 <_printf_i+0xe8>
 8003fca:	0649      	lsls	r1, r1, #25
 8003fcc:	bf48      	it	mi
 8003fce:	b2ad      	uxthmi	r5, r5
 8003fd0:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fd2:	6033      	str	r3, [r6, #0]
 8003fd4:	bf14      	ite	ne
 8003fd6:	230a      	movne	r3, #10
 8003fd8:	2308      	moveq	r3, #8
 8003fda:	4851      	ldr	r0, [pc, #324]	@ (8004120 <_printf_i+0x238>)
 8003fdc:	2100      	movs	r1, #0
 8003fde:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fe2:	6866      	ldr	r6, [r4, #4]
 8003fe4:	2e00      	cmp	r6, #0
 8003fe6:	bfa8      	it	ge
 8003fe8:	6821      	ldrge	r1, [r4, #0]
 8003fea:	60a6      	str	r6, [r4, #8]
 8003fec:	bfa4      	itt	ge
 8003fee:	f021 0104 	bicge.w	r1, r1, #4
 8003ff2:	6021      	strge	r1, [r4, #0]
 8003ff4:	b90d      	cbnz	r5, 8003ffa <_printf_i+0x112>
 8003ff6:	2e00      	cmp	r6, #0
 8003ff8:	d04b      	beq.n	8004092 <_printf_i+0x1aa>
 8003ffa:	4616      	mov	r6, r2
 8003ffc:	fbb5 f1f3 	udiv	r1, r5, r3
 8004000:	fb03 5711 	mls	r7, r3, r1, r5
 8004004:	5dc7      	ldrb	r7, [r0, r7]
 8004006:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800400a:	462f      	mov	r7, r5
 800400c:	42bb      	cmp	r3, r7
 800400e:	460d      	mov	r5, r1
 8004010:	d9f4      	bls.n	8003ffc <_printf_i+0x114>
 8004012:	2b08      	cmp	r3, #8
 8004014:	d10b      	bne.n	800402e <_printf_i+0x146>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	07df      	lsls	r7, r3, #31
 800401a:	d508      	bpl.n	800402e <_printf_i+0x146>
 800401c:	6923      	ldr	r3, [r4, #16]
 800401e:	6861      	ldr	r1, [r4, #4]
 8004020:	4299      	cmp	r1, r3
 8004022:	bfde      	ittt	le
 8004024:	2330      	movle	r3, #48	@ 0x30
 8004026:	f806 3c01 	strble.w	r3, [r6, #-1]
 800402a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800402e:	1b92      	subs	r2, r2, r6
 8004030:	6122      	str	r2, [r4, #16]
 8004032:	464b      	mov	r3, r9
 8004034:	4621      	mov	r1, r4
 8004036:	4640      	mov	r0, r8
 8004038:	f8cd a000 	str.w	sl, [sp]
 800403c:	aa03      	add	r2, sp, #12
 800403e:	f7ff fee1 	bl	8003e04 <_printf_common>
 8004042:	3001      	adds	r0, #1
 8004044:	d14a      	bne.n	80040dc <_printf_i+0x1f4>
 8004046:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800404a:	b004      	add	sp, #16
 800404c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004050:	6823      	ldr	r3, [r4, #0]
 8004052:	f043 0320 	orr.w	r3, r3, #32
 8004056:	6023      	str	r3, [r4, #0]
 8004058:	2778      	movs	r7, #120	@ 0x78
 800405a:	4832      	ldr	r0, [pc, #200]	@ (8004124 <_printf_i+0x23c>)
 800405c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004060:	6823      	ldr	r3, [r4, #0]
 8004062:	6831      	ldr	r1, [r6, #0]
 8004064:	061f      	lsls	r7, r3, #24
 8004066:	f851 5b04 	ldr.w	r5, [r1], #4
 800406a:	d402      	bmi.n	8004072 <_printf_i+0x18a>
 800406c:	065f      	lsls	r7, r3, #25
 800406e:	bf48      	it	mi
 8004070:	b2ad      	uxthmi	r5, r5
 8004072:	6031      	str	r1, [r6, #0]
 8004074:	07d9      	lsls	r1, r3, #31
 8004076:	bf44      	itt	mi
 8004078:	f043 0320 	orrmi.w	r3, r3, #32
 800407c:	6023      	strmi	r3, [r4, #0]
 800407e:	b11d      	cbz	r5, 8004088 <_printf_i+0x1a0>
 8004080:	2310      	movs	r3, #16
 8004082:	e7ab      	b.n	8003fdc <_printf_i+0xf4>
 8004084:	4826      	ldr	r0, [pc, #152]	@ (8004120 <_printf_i+0x238>)
 8004086:	e7e9      	b.n	800405c <_printf_i+0x174>
 8004088:	6823      	ldr	r3, [r4, #0]
 800408a:	f023 0320 	bic.w	r3, r3, #32
 800408e:	6023      	str	r3, [r4, #0]
 8004090:	e7f6      	b.n	8004080 <_printf_i+0x198>
 8004092:	4616      	mov	r6, r2
 8004094:	e7bd      	b.n	8004012 <_printf_i+0x12a>
 8004096:	6833      	ldr	r3, [r6, #0]
 8004098:	6825      	ldr	r5, [r4, #0]
 800409a:	1d18      	adds	r0, r3, #4
 800409c:	6961      	ldr	r1, [r4, #20]
 800409e:	6030      	str	r0, [r6, #0]
 80040a0:	062e      	lsls	r6, r5, #24
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	d501      	bpl.n	80040aa <_printf_i+0x1c2>
 80040a6:	6019      	str	r1, [r3, #0]
 80040a8:	e002      	b.n	80040b0 <_printf_i+0x1c8>
 80040aa:	0668      	lsls	r0, r5, #25
 80040ac:	d5fb      	bpl.n	80040a6 <_printf_i+0x1be>
 80040ae:	8019      	strh	r1, [r3, #0]
 80040b0:	2300      	movs	r3, #0
 80040b2:	4616      	mov	r6, r2
 80040b4:	6123      	str	r3, [r4, #16]
 80040b6:	e7bc      	b.n	8004032 <_printf_i+0x14a>
 80040b8:	6833      	ldr	r3, [r6, #0]
 80040ba:	2100      	movs	r1, #0
 80040bc:	1d1a      	adds	r2, r3, #4
 80040be:	6032      	str	r2, [r6, #0]
 80040c0:	681e      	ldr	r6, [r3, #0]
 80040c2:	6862      	ldr	r2, [r4, #4]
 80040c4:	4630      	mov	r0, r6
 80040c6:	f000 f893 	bl	80041f0 <memchr>
 80040ca:	b108      	cbz	r0, 80040d0 <_printf_i+0x1e8>
 80040cc:	1b80      	subs	r0, r0, r6
 80040ce:	6060      	str	r0, [r4, #4]
 80040d0:	6863      	ldr	r3, [r4, #4]
 80040d2:	6123      	str	r3, [r4, #16]
 80040d4:	2300      	movs	r3, #0
 80040d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040da:	e7aa      	b.n	8004032 <_printf_i+0x14a>
 80040dc:	4632      	mov	r2, r6
 80040de:	4649      	mov	r1, r9
 80040e0:	4640      	mov	r0, r8
 80040e2:	6923      	ldr	r3, [r4, #16]
 80040e4:	47d0      	blx	sl
 80040e6:	3001      	adds	r0, #1
 80040e8:	d0ad      	beq.n	8004046 <_printf_i+0x15e>
 80040ea:	6823      	ldr	r3, [r4, #0]
 80040ec:	079b      	lsls	r3, r3, #30
 80040ee:	d413      	bmi.n	8004118 <_printf_i+0x230>
 80040f0:	68e0      	ldr	r0, [r4, #12]
 80040f2:	9b03      	ldr	r3, [sp, #12]
 80040f4:	4298      	cmp	r0, r3
 80040f6:	bfb8      	it	lt
 80040f8:	4618      	movlt	r0, r3
 80040fa:	e7a6      	b.n	800404a <_printf_i+0x162>
 80040fc:	2301      	movs	r3, #1
 80040fe:	4632      	mov	r2, r6
 8004100:	4649      	mov	r1, r9
 8004102:	4640      	mov	r0, r8
 8004104:	47d0      	blx	sl
 8004106:	3001      	adds	r0, #1
 8004108:	d09d      	beq.n	8004046 <_printf_i+0x15e>
 800410a:	3501      	adds	r5, #1
 800410c:	68e3      	ldr	r3, [r4, #12]
 800410e:	9903      	ldr	r1, [sp, #12]
 8004110:	1a5b      	subs	r3, r3, r1
 8004112:	42ab      	cmp	r3, r5
 8004114:	dcf2      	bgt.n	80040fc <_printf_i+0x214>
 8004116:	e7eb      	b.n	80040f0 <_printf_i+0x208>
 8004118:	2500      	movs	r5, #0
 800411a:	f104 0619 	add.w	r6, r4, #25
 800411e:	e7f5      	b.n	800410c <_printf_i+0x224>
 8004120:	0800435b 	.word	0x0800435b
 8004124:	0800436c 	.word	0x0800436c

08004128 <__malloc_lock>:
 8004128:	4801      	ldr	r0, [pc, #4]	@ (8004130 <__malloc_lock+0x8>)
 800412a:	f7ff bc6f 	b.w	8003a0c <__retarget_lock_acquire_recursive>
 800412e:	bf00      	nop
 8004130:	2000028c 	.word	0x2000028c

08004134 <__malloc_unlock>:
 8004134:	4801      	ldr	r0, [pc, #4]	@ (800413c <__malloc_unlock+0x8>)
 8004136:	f7ff bc6a 	b.w	8003a0e <__retarget_lock_release_recursive>
 800413a:	bf00      	nop
 800413c:	2000028c 	.word	0x2000028c

08004140 <_realloc_r>:
 8004140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004144:	4680      	mov	r8, r0
 8004146:	4615      	mov	r5, r2
 8004148:	460c      	mov	r4, r1
 800414a:	b921      	cbnz	r1, 8004156 <_realloc_r+0x16>
 800414c:	4611      	mov	r1, r2
 800414e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004152:	f7ff bdd7 	b.w	8003d04 <_malloc_r>
 8004156:	b92a      	cbnz	r2, 8004164 <_realloc_r+0x24>
 8004158:	f000 f866 	bl	8004228 <_free_r>
 800415c:	2400      	movs	r4, #0
 800415e:	4620      	mov	r0, r4
 8004160:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004164:	f000 f8a8 	bl	80042b8 <_malloc_usable_size_r>
 8004168:	4285      	cmp	r5, r0
 800416a:	4606      	mov	r6, r0
 800416c:	d802      	bhi.n	8004174 <_realloc_r+0x34>
 800416e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004172:	d8f4      	bhi.n	800415e <_realloc_r+0x1e>
 8004174:	4629      	mov	r1, r5
 8004176:	4640      	mov	r0, r8
 8004178:	f7ff fdc4 	bl	8003d04 <_malloc_r>
 800417c:	4607      	mov	r7, r0
 800417e:	2800      	cmp	r0, #0
 8004180:	d0ec      	beq.n	800415c <_realloc_r+0x1c>
 8004182:	42b5      	cmp	r5, r6
 8004184:	462a      	mov	r2, r5
 8004186:	4621      	mov	r1, r4
 8004188:	bf28      	it	cs
 800418a:	4632      	movcs	r2, r6
 800418c:	f000 f83e 	bl	800420c <memcpy>
 8004190:	4621      	mov	r1, r4
 8004192:	4640      	mov	r0, r8
 8004194:	f000 f848 	bl	8004228 <_free_r>
 8004198:	463c      	mov	r4, r7
 800419a:	e7e0      	b.n	800415e <_realloc_r+0x1e>

0800419c <memmove>:
 800419c:	4288      	cmp	r0, r1
 800419e:	b510      	push	{r4, lr}
 80041a0:	eb01 0402 	add.w	r4, r1, r2
 80041a4:	d902      	bls.n	80041ac <memmove+0x10>
 80041a6:	4284      	cmp	r4, r0
 80041a8:	4623      	mov	r3, r4
 80041aa:	d807      	bhi.n	80041bc <memmove+0x20>
 80041ac:	1e43      	subs	r3, r0, #1
 80041ae:	42a1      	cmp	r1, r4
 80041b0:	d008      	beq.n	80041c4 <memmove+0x28>
 80041b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80041b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80041ba:	e7f8      	b.n	80041ae <memmove+0x12>
 80041bc:	4601      	mov	r1, r0
 80041be:	4402      	add	r2, r0
 80041c0:	428a      	cmp	r2, r1
 80041c2:	d100      	bne.n	80041c6 <memmove+0x2a>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80041ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80041ce:	e7f7      	b.n	80041c0 <memmove+0x24>

080041d0 <_sbrk_r>:
 80041d0:	b538      	push	{r3, r4, r5, lr}
 80041d2:	2300      	movs	r3, #0
 80041d4:	4d05      	ldr	r5, [pc, #20]	@ (80041ec <_sbrk_r+0x1c>)
 80041d6:	4604      	mov	r4, r0
 80041d8:	4608      	mov	r0, r1
 80041da:	602b      	str	r3, [r5, #0]
 80041dc:	f7fc fec6 	bl	8000f6c <_sbrk>
 80041e0:	1c43      	adds	r3, r0, #1
 80041e2:	d102      	bne.n	80041ea <_sbrk_r+0x1a>
 80041e4:	682b      	ldr	r3, [r5, #0]
 80041e6:	b103      	cbz	r3, 80041ea <_sbrk_r+0x1a>
 80041e8:	6023      	str	r3, [r4, #0]
 80041ea:	bd38      	pop	{r3, r4, r5, pc}
 80041ec:	20000298 	.word	0x20000298

080041f0 <memchr>:
 80041f0:	4603      	mov	r3, r0
 80041f2:	b510      	push	{r4, lr}
 80041f4:	b2c9      	uxtb	r1, r1
 80041f6:	4402      	add	r2, r0
 80041f8:	4293      	cmp	r3, r2
 80041fa:	4618      	mov	r0, r3
 80041fc:	d101      	bne.n	8004202 <memchr+0x12>
 80041fe:	2000      	movs	r0, #0
 8004200:	e003      	b.n	800420a <memchr+0x1a>
 8004202:	7804      	ldrb	r4, [r0, #0]
 8004204:	3301      	adds	r3, #1
 8004206:	428c      	cmp	r4, r1
 8004208:	d1f6      	bne.n	80041f8 <memchr+0x8>
 800420a:	bd10      	pop	{r4, pc}

0800420c <memcpy>:
 800420c:	440a      	add	r2, r1
 800420e:	4291      	cmp	r1, r2
 8004210:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 8004214:	d100      	bne.n	8004218 <memcpy+0xc>
 8004216:	4770      	bx	lr
 8004218:	b510      	push	{r4, lr}
 800421a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800421e:	4291      	cmp	r1, r2
 8004220:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004224:	d1f9      	bne.n	800421a <memcpy+0xe>
 8004226:	bd10      	pop	{r4, pc}

08004228 <_free_r>:
 8004228:	b538      	push	{r3, r4, r5, lr}
 800422a:	4605      	mov	r5, r0
 800422c:	2900      	cmp	r1, #0
 800422e:	d040      	beq.n	80042b2 <_free_r+0x8a>
 8004230:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004234:	1f0c      	subs	r4, r1, #4
 8004236:	2b00      	cmp	r3, #0
 8004238:	bfb8      	it	lt
 800423a:	18e4      	addlt	r4, r4, r3
 800423c:	f7ff ff74 	bl	8004128 <__malloc_lock>
 8004240:	4a1c      	ldr	r2, [pc, #112]	@ (80042b4 <_free_r+0x8c>)
 8004242:	6813      	ldr	r3, [r2, #0]
 8004244:	b933      	cbnz	r3, 8004254 <_free_r+0x2c>
 8004246:	6063      	str	r3, [r4, #4]
 8004248:	6014      	str	r4, [r2, #0]
 800424a:	4628      	mov	r0, r5
 800424c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004250:	f7ff bf70 	b.w	8004134 <__malloc_unlock>
 8004254:	42a3      	cmp	r3, r4
 8004256:	d908      	bls.n	800426a <_free_r+0x42>
 8004258:	6820      	ldr	r0, [r4, #0]
 800425a:	1821      	adds	r1, r4, r0
 800425c:	428b      	cmp	r3, r1
 800425e:	bf01      	itttt	eq
 8004260:	6819      	ldreq	r1, [r3, #0]
 8004262:	685b      	ldreq	r3, [r3, #4]
 8004264:	1809      	addeq	r1, r1, r0
 8004266:	6021      	streq	r1, [r4, #0]
 8004268:	e7ed      	b.n	8004246 <_free_r+0x1e>
 800426a:	461a      	mov	r2, r3
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	b10b      	cbz	r3, 8004274 <_free_r+0x4c>
 8004270:	42a3      	cmp	r3, r4
 8004272:	d9fa      	bls.n	800426a <_free_r+0x42>
 8004274:	6811      	ldr	r1, [r2, #0]
 8004276:	1850      	adds	r0, r2, r1
 8004278:	42a0      	cmp	r0, r4
 800427a:	d10b      	bne.n	8004294 <_free_r+0x6c>
 800427c:	6820      	ldr	r0, [r4, #0]
 800427e:	4401      	add	r1, r0
 8004280:	1850      	adds	r0, r2, r1
 8004282:	4283      	cmp	r3, r0
 8004284:	6011      	str	r1, [r2, #0]
 8004286:	d1e0      	bne.n	800424a <_free_r+0x22>
 8004288:	6818      	ldr	r0, [r3, #0]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	4408      	add	r0, r1
 800428e:	6010      	str	r0, [r2, #0]
 8004290:	6053      	str	r3, [r2, #4]
 8004292:	e7da      	b.n	800424a <_free_r+0x22>
 8004294:	d902      	bls.n	800429c <_free_r+0x74>
 8004296:	230c      	movs	r3, #12
 8004298:	602b      	str	r3, [r5, #0]
 800429a:	e7d6      	b.n	800424a <_free_r+0x22>
 800429c:	6820      	ldr	r0, [r4, #0]
 800429e:	1821      	adds	r1, r4, r0
 80042a0:	428b      	cmp	r3, r1
 80042a2:	bf01      	itttt	eq
 80042a4:	6819      	ldreq	r1, [r3, #0]
 80042a6:	685b      	ldreq	r3, [r3, #4]
 80042a8:	1809      	addeq	r1, r1, r0
 80042aa:	6021      	streq	r1, [r4, #0]
 80042ac:	6063      	str	r3, [r4, #4]
 80042ae:	6054      	str	r4, [r2, #4]
 80042b0:	e7cb      	b.n	800424a <_free_r+0x22>
 80042b2:	bd38      	pop	{r3, r4, r5, pc}
 80042b4:	20000294 	.word	0x20000294

080042b8 <_malloc_usable_size_r>:
 80042b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80042bc:	1f18      	subs	r0, r3, #4
 80042be:	2b00      	cmp	r3, #0
 80042c0:	bfbc      	itt	lt
 80042c2:	580b      	ldrlt	r3, [r1, r0]
 80042c4:	18c0      	addlt	r0, r0, r3
 80042c6:	4770      	bx	lr

080042c8 <_init>:
 80042c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ca:	bf00      	nop
 80042cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ce:	bc08      	pop	{r3}
 80042d0:	469e      	mov	lr, r3
 80042d2:	4770      	bx	lr

080042d4 <_fini>:
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	bf00      	nop
 80042d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042da:	bc08      	pop	{r3}
 80042dc:	469e      	mov	lr, r3
 80042de:	4770      	bx	lr
